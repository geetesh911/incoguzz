import { ClassType } from "type-graphql";
import * as tslib from "tslib";
import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as argsTypes from "./resolvers/crud/args.index";
import * as actionResolvers from "./resolvers/crud/resolvers-actions.index";
import * as relationResolvers from "./resolvers/relations/resolvers.index";
import * as models from "./models";
import * as outputTypes from "./resolvers/outputs";
import * as inputTypes from "./resolvers/inputs";

const crudResolversMap = {
  User: crudResolvers.UserCrudResolver,
  Profile: crudResolvers.ProfileCrudResolver,
  Settings: crudResolvers.SettingsCrudResolver,
  Token: crudResolvers.TokenCrudResolver,
  Blocked: crudResolvers.BlockedCrudResolver,
  Post: crudResolvers.PostCrudResolver,
  Poll: crudResolvers.PollCrudResolver,
  PollOption: crudResolvers.PollOptionCrudResolver,
  PollAnswer: crudResolvers.PollAnswerCrudResolver,
  Photo: crudResolvers.PhotoCrudResolver,
  Video: crudResolvers.VideoCrudResolver,
  ClipAudio: crudResolvers.ClipAudioCrudResolver,
  Clip: crudResolvers.ClipCrudResolver,
  Textual: crudResolvers.TextualCrudResolver,
  Audio: crudResolvers.AudioCrudResolver,
  Tag: crudResolvers.TagCrudResolver,
  Place: crudResolvers.PlaceCrudResolver,
  Like: crudResolvers.LikeCrudResolver,
  Comment: crudResolvers.CommentCrudResolver,
  CommentReplies: crudResolvers.CommentRepliesCrudResolver,
  Follower: crudResolvers.FollowerCrudResolver,
  Following: crudResolvers.FollowingCrudResolver,
  FollowRequest: crudResolvers.FollowRequestCrudResolver,
  Message: crudResolvers.MessageCrudResolver,
  Story: crudResolvers.StoryCrudResolver,
  Activity: crudResolvers.ActivityCrudResolver,
};
const actionResolversMap = {
  User: {
    user: actionResolvers.FindUniqueUserResolver,
    findFirstUser: actionResolvers.FindFirstUserResolver,
    users: actionResolvers.FindManyUserResolver,
    createUser: actionResolvers.CreateUserResolver,
    createManyUser: actionResolvers.CreateManyUserResolver,
    deleteUser: actionResolvers.DeleteUserResolver,
    updateUser: actionResolvers.UpdateUserResolver,
    deleteManyUser: actionResolvers.DeleteManyUserResolver,
    updateManyUser: actionResolvers.UpdateManyUserResolver,
    upsertUser: actionResolvers.UpsertUserResolver,
    aggregateUser: actionResolvers.AggregateUserResolver,
    groupByUser: actionResolvers.GroupByUserResolver,
  },
  Profile: {
    profile: actionResolvers.FindUniqueProfileResolver,
    findFirstProfile: actionResolvers.FindFirstProfileResolver,
    profiles: actionResolvers.FindManyProfileResolver,
    createProfile: actionResolvers.CreateProfileResolver,
    createManyProfile: actionResolvers.CreateManyProfileResolver,
    deleteProfile: actionResolvers.DeleteProfileResolver,
    updateProfile: actionResolvers.UpdateProfileResolver,
    deleteManyProfile: actionResolvers.DeleteManyProfileResolver,
    updateManyProfile: actionResolvers.UpdateManyProfileResolver,
    upsertProfile: actionResolvers.UpsertProfileResolver,
    aggregateProfile: actionResolvers.AggregateProfileResolver,
    groupByProfile: actionResolvers.GroupByProfileResolver,
  },
  Settings: {
    findUniqueSettings: actionResolvers.FindUniqueSettingsResolver,
    findFirstSettings: actionResolvers.FindFirstSettingsResolver,
    findManySettings: actionResolvers.FindManySettingsResolver,
    createSettings: actionResolvers.CreateSettingsResolver,
    createManySettings: actionResolvers.CreateManySettingsResolver,
    deleteSettings: actionResolvers.DeleteSettingsResolver,
    updateSettings: actionResolvers.UpdateSettingsResolver,
    deleteManySettings: actionResolvers.DeleteManySettingsResolver,
    updateManySettings: actionResolvers.UpdateManySettingsResolver,
    upsertSettings: actionResolvers.UpsertSettingsResolver,
    aggregateSettings: actionResolvers.AggregateSettingsResolver,
    groupBySettings: actionResolvers.GroupBySettingsResolver,
  },
  Token: {
    token: actionResolvers.FindUniqueTokenResolver,
    findFirstToken: actionResolvers.FindFirstTokenResolver,
    tokens: actionResolvers.FindManyTokenResolver,
    createToken: actionResolvers.CreateTokenResolver,
    createManyToken: actionResolvers.CreateManyTokenResolver,
    deleteToken: actionResolvers.DeleteTokenResolver,
    updateToken: actionResolvers.UpdateTokenResolver,
    deleteManyToken: actionResolvers.DeleteManyTokenResolver,
    updateManyToken: actionResolvers.UpdateManyTokenResolver,
    upsertToken: actionResolvers.UpsertTokenResolver,
    aggregateToken: actionResolvers.AggregateTokenResolver,
    groupByToken: actionResolvers.GroupByTokenResolver,
  },
  Blocked: {
    blocked: actionResolvers.FindUniqueBlockedResolver,
    findFirstBlocked: actionResolvers.FindFirstBlockedResolver,
    blockeds: actionResolvers.FindManyBlockedResolver,
    createBlocked: actionResolvers.CreateBlockedResolver,
    createManyBlocked: actionResolvers.CreateManyBlockedResolver,
    deleteBlocked: actionResolvers.DeleteBlockedResolver,
    updateBlocked: actionResolvers.UpdateBlockedResolver,
    deleteManyBlocked: actionResolvers.DeleteManyBlockedResolver,
    updateManyBlocked: actionResolvers.UpdateManyBlockedResolver,
    upsertBlocked: actionResolvers.UpsertBlockedResolver,
    aggregateBlocked: actionResolvers.AggregateBlockedResolver,
    groupByBlocked: actionResolvers.GroupByBlockedResolver,
  },
  Post: {
    post: actionResolvers.FindUniquePostResolver,
    findFirstPost: actionResolvers.FindFirstPostResolver,
    posts: actionResolvers.FindManyPostResolver,
    createPost: actionResolvers.CreatePostResolver,
    createManyPost: actionResolvers.CreateManyPostResolver,
    deletePost: actionResolvers.DeletePostResolver,
    updatePost: actionResolvers.UpdatePostResolver,
    deleteManyPost: actionResolvers.DeleteManyPostResolver,
    updateManyPost: actionResolvers.UpdateManyPostResolver,
    upsertPost: actionResolvers.UpsertPostResolver,
    aggregatePost: actionResolvers.AggregatePostResolver,
    groupByPost: actionResolvers.GroupByPostResolver,
  },
  Poll: {
    poll: actionResolvers.FindUniquePollResolver,
    findFirstPoll: actionResolvers.FindFirstPollResolver,
    polls: actionResolvers.FindManyPollResolver,
    createPoll: actionResolvers.CreatePollResolver,
    createManyPoll: actionResolvers.CreateManyPollResolver,
    deletePoll: actionResolvers.DeletePollResolver,
    updatePoll: actionResolvers.UpdatePollResolver,
    deleteManyPoll: actionResolvers.DeleteManyPollResolver,
    updateManyPoll: actionResolvers.UpdateManyPollResolver,
    upsertPoll: actionResolvers.UpsertPollResolver,
    aggregatePoll: actionResolvers.AggregatePollResolver,
    groupByPoll: actionResolvers.GroupByPollResolver,
  },
  PollOption: {
    pollOption: actionResolvers.FindUniquePollOptionResolver,
    findFirstPollOption: actionResolvers.FindFirstPollOptionResolver,
    pollOptions: actionResolvers.FindManyPollOptionResolver,
    createPollOption: actionResolvers.CreatePollOptionResolver,
    createManyPollOption: actionResolvers.CreateManyPollOptionResolver,
    deletePollOption: actionResolvers.DeletePollOptionResolver,
    updatePollOption: actionResolvers.UpdatePollOptionResolver,
    deleteManyPollOption: actionResolvers.DeleteManyPollOptionResolver,
    updateManyPollOption: actionResolvers.UpdateManyPollOptionResolver,
    upsertPollOption: actionResolvers.UpsertPollOptionResolver,
    aggregatePollOption: actionResolvers.AggregatePollOptionResolver,
    groupByPollOption: actionResolvers.GroupByPollOptionResolver,
  },
  PollAnswer: {
    pollAnswer: actionResolvers.FindUniquePollAnswerResolver,
    findFirstPollAnswer: actionResolvers.FindFirstPollAnswerResolver,
    pollAnswers: actionResolvers.FindManyPollAnswerResolver,
    createPollAnswer: actionResolvers.CreatePollAnswerResolver,
    createManyPollAnswer: actionResolvers.CreateManyPollAnswerResolver,
    deletePollAnswer: actionResolvers.DeletePollAnswerResolver,
    updatePollAnswer: actionResolvers.UpdatePollAnswerResolver,
    deleteManyPollAnswer: actionResolvers.DeleteManyPollAnswerResolver,
    updateManyPollAnswer: actionResolvers.UpdateManyPollAnswerResolver,
    upsertPollAnswer: actionResolvers.UpsertPollAnswerResolver,
    aggregatePollAnswer: actionResolvers.AggregatePollAnswerResolver,
    groupByPollAnswer: actionResolvers.GroupByPollAnswerResolver,
  },
  Photo: {
    photo: actionResolvers.FindUniquePhotoResolver,
    findFirstPhoto: actionResolvers.FindFirstPhotoResolver,
    photos: actionResolvers.FindManyPhotoResolver,
    createPhoto: actionResolvers.CreatePhotoResolver,
    createManyPhoto: actionResolvers.CreateManyPhotoResolver,
    deletePhoto: actionResolvers.DeletePhotoResolver,
    updatePhoto: actionResolvers.UpdatePhotoResolver,
    deleteManyPhoto: actionResolvers.DeleteManyPhotoResolver,
    updateManyPhoto: actionResolvers.UpdateManyPhotoResolver,
    upsertPhoto: actionResolvers.UpsertPhotoResolver,
    aggregatePhoto: actionResolvers.AggregatePhotoResolver,
    groupByPhoto: actionResolvers.GroupByPhotoResolver,
  },
  Video: {
    video: actionResolvers.FindUniqueVideoResolver,
    findFirstVideo: actionResolvers.FindFirstVideoResolver,
    videos: actionResolvers.FindManyVideoResolver,
    createVideo: actionResolvers.CreateVideoResolver,
    createManyVideo: actionResolvers.CreateManyVideoResolver,
    deleteVideo: actionResolvers.DeleteVideoResolver,
    updateVideo: actionResolvers.UpdateVideoResolver,
    deleteManyVideo: actionResolvers.DeleteManyVideoResolver,
    updateManyVideo: actionResolvers.UpdateManyVideoResolver,
    upsertVideo: actionResolvers.UpsertVideoResolver,
    aggregateVideo: actionResolvers.AggregateVideoResolver,
    groupByVideo: actionResolvers.GroupByVideoResolver,
  },
  ClipAudio: {
    clipAudio: actionResolvers.FindUniqueClipAudioResolver,
    findFirstClipAudio: actionResolvers.FindFirstClipAudioResolver,
    clipAudios: actionResolvers.FindManyClipAudioResolver,
    createClipAudio: actionResolvers.CreateClipAudioResolver,
    createManyClipAudio: actionResolvers.CreateManyClipAudioResolver,
    deleteClipAudio: actionResolvers.DeleteClipAudioResolver,
    updateClipAudio: actionResolvers.UpdateClipAudioResolver,
    deleteManyClipAudio: actionResolvers.DeleteManyClipAudioResolver,
    updateManyClipAudio: actionResolvers.UpdateManyClipAudioResolver,
    upsertClipAudio: actionResolvers.UpsertClipAudioResolver,
    aggregateClipAudio: actionResolvers.AggregateClipAudioResolver,
    groupByClipAudio: actionResolvers.GroupByClipAudioResolver,
  },
  Clip: {
    clip: actionResolvers.FindUniqueClipResolver,
    findFirstClip: actionResolvers.FindFirstClipResolver,
    clips: actionResolvers.FindManyClipResolver,
    createClip: actionResolvers.CreateClipResolver,
    createManyClip: actionResolvers.CreateManyClipResolver,
    deleteClip: actionResolvers.DeleteClipResolver,
    updateClip: actionResolvers.UpdateClipResolver,
    deleteManyClip: actionResolvers.DeleteManyClipResolver,
    updateManyClip: actionResolvers.UpdateManyClipResolver,
    upsertClip: actionResolvers.UpsertClipResolver,
    aggregateClip: actionResolvers.AggregateClipResolver,
    groupByClip: actionResolvers.GroupByClipResolver,
  },
  Textual: {
    textual: actionResolvers.FindUniqueTextualResolver,
    findFirstTextual: actionResolvers.FindFirstTextualResolver,
    textuals: actionResolvers.FindManyTextualResolver,
    createTextual: actionResolvers.CreateTextualResolver,
    createManyTextual: actionResolvers.CreateManyTextualResolver,
    deleteTextual: actionResolvers.DeleteTextualResolver,
    updateTextual: actionResolvers.UpdateTextualResolver,
    deleteManyTextual: actionResolvers.DeleteManyTextualResolver,
    updateManyTextual: actionResolvers.UpdateManyTextualResolver,
    upsertTextual: actionResolvers.UpsertTextualResolver,
    aggregateTextual: actionResolvers.AggregateTextualResolver,
    groupByTextual: actionResolvers.GroupByTextualResolver,
  },
  Audio: {
    findUniqueAudio: actionResolvers.FindUniqueAudioResolver,
    findFirstAudio: actionResolvers.FindFirstAudioResolver,
    findManyAudio: actionResolvers.FindManyAudioResolver,
    createAudio: actionResolvers.CreateAudioResolver,
    createManyAudio: actionResolvers.CreateManyAudioResolver,
    deleteAudio: actionResolvers.DeleteAudioResolver,
    updateAudio: actionResolvers.UpdateAudioResolver,
    deleteManyAudio: actionResolvers.DeleteManyAudioResolver,
    updateManyAudio: actionResolvers.UpdateManyAudioResolver,
    upsertAudio: actionResolvers.UpsertAudioResolver,
    aggregateAudio: actionResolvers.AggregateAudioResolver,
    groupByAudio: actionResolvers.GroupByAudioResolver,
  },
  Tag: {
    tag: actionResolvers.FindUniqueTagResolver,
    findFirstTag: actionResolvers.FindFirstTagResolver,
    tags: actionResolvers.FindManyTagResolver,
    createTag: actionResolvers.CreateTagResolver,
    createManyTag: actionResolvers.CreateManyTagResolver,
    deleteTag: actionResolvers.DeleteTagResolver,
    updateTag: actionResolvers.UpdateTagResolver,
    deleteManyTag: actionResolvers.DeleteManyTagResolver,
    updateManyTag: actionResolvers.UpdateManyTagResolver,
    upsertTag: actionResolvers.UpsertTagResolver,
    aggregateTag: actionResolvers.AggregateTagResolver,
    groupByTag: actionResolvers.GroupByTagResolver,
  },
  Place: {
    place: actionResolvers.FindUniquePlaceResolver,
    findFirstPlace: actionResolvers.FindFirstPlaceResolver,
    places: actionResolvers.FindManyPlaceResolver,
    createPlace: actionResolvers.CreatePlaceResolver,
    createManyPlace: actionResolvers.CreateManyPlaceResolver,
    deletePlace: actionResolvers.DeletePlaceResolver,
    updatePlace: actionResolvers.UpdatePlaceResolver,
    deleteManyPlace: actionResolvers.DeleteManyPlaceResolver,
    updateManyPlace: actionResolvers.UpdateManyPlaceResolver,
    upsertPlace: actionResolvers.UpsertPlaceResolver,
    aggregatePlace: actionResolvers.AggregatePlaceResolver,
    groupByPlace: actionResolvers.GroupByPlaceResolver,
  },
  Like: {
    like: actionResolvers.FindUniqueLikeResolver,
    findFirstLike: actionResolvers.FindFirstLikeResolver,
    likes: actionResolvers.FindManyLikeResolver,
    createLike: actionResolvers.CreateLikeResolver,
    createManyLike: actionResolvers.CreateManyLikeResolver,
    deleteLike: actionResolvers.DeleteLikeResolver,
    updateLike: actionResolvers.UpdateLikeResolver,
    deleteManyLike: actionResolvers.DeleteManyLikeResolver,
    updateManyLike: actionResolvers.UpdateManyLikeResolver,
    upsertLike: actionResolvers.UpsertLikeResolver,
    aggregateLike: actionResolvers.AggregateLikeResolver,
    groupByLike: actionResolvers.GroupByLikeResolver,
  },
  Comment: {
    comment: actionResolvers.FindUniqueCommentResolver,
    findFirstComment: actionResolvers.FindFirstCommentResolver,
    comments: actionResolvers.FindManyCommentResolver,
    createComment: actionResolvers.CreateCommentResolver,
    createManyComment: actionResolvers.CreateManyCommentResolver,
    deleteComment: actionResolvers.DeleteCommentResolver,
    updateComment: actionResolvers.UpdateCommentResolver,
    deleteManyComment: actionResolvers.DeleteManyCommentResolver,
    updateManyComment: actionResolvers.UpdateManyCommentResolver,
    upsertComment: actionResolvers.UpsertCommentResolver,
    aggregateComment: actionResolvers.AggregateCommentResolver,
    groupByComment: actionResolvers.GroupByCommentResolver,
  },
  CommentReplies: {
    findUniqueCommentReplies: actionResolvers.FindUniqueCommentRepliesResolver,
    findFirstCommentReplies: actionResolvers.FindFirstCommentRepliesResolver,
    findManyCommentReplies: actionResolvers.FindManyCommentRepliesResolver,
    createCommentReplies: actionResolvers.CreateCommentRepliesResolver,
    createManyCommentReplies: actionResolvers.CreateManyCommentRepliesResolver,
    deleteCommentReplies: actionResolvers.DeleteCommentRepliesResolver,
    updateCommentReplies: actionResolvers.UpdateCommentRepliesResolver,
    deleteManyCommentReplies: actionResolvers.DeleteManyCommentRepliesResolver,
    updateManyCommentReplies: actionResolvers.UpdateManyCommentRepliesResolver,
    upsertCommentReplies: actionResolvers.UpsertCommentRepliesResolver,
    aggregateCommentReplies: actionResolvers.AggregateCommentRepliesResolver,
    groupByCommentReplies: actionResolvers.GroupByCommentRepliesResolver,
  },
  Follower: {
    follower: actionResolvers.FindUniqueFollowerResolver,
    findFirstFollower: actionResolvers.FindFirstFollowerResolver,
    followers: actionResolvers.FindManyFollowerResolver,
    createFollower: actionResolvers.CreateFollowerResolver,
    createManyFollower: actionResolvers.CreateManyFollowerResolver,
    deleteFollower: actionResolvers.DeleteFollowerResolver,
    updateFollower: actionResolvers.UpdateFollowerResolver,
    deleteManyFollower: actionResolvers.DeleteManyFollowerResolver,
    updateManyFollower: actionResolvers.UpdateManyFollowerResolver,
    upsertFollower: actionResolvers.UpsertFollowerResolver,
    aggregateFollower: actionResolvers.AggregateFollowerResolver,
    groupByFollower: actionResolvers.GroupByFollowerResolver,
  },
  Following: {
    following: actionResolvers.FindUniqueFollowingResolver,
    findFirstFollowing: actionResolvers.FindFirstFollowingResolver,
    followings: actionResolvers.FindManyFollowingResolver,
    createFollowing: actionResolvers.CreateFollowingResolver,
    createManyFollowing: actionResolvers.CreateManyFollowingResolver,
    deleteFollowing: actionResolvers.DeleteFollowingResolver,
    updateFollowing: actionResolvers.UpdateFollowingResolver,
    deleteManyFollowing: actionResolvers.DeleteManyFollowingResolver,
    updateManyFollowing: actionResolvers.UpdateManyFollowingResolver,
    upsertFollowing: actionResolvers.UpsertFollowingResolver,
    aggregateFollowing: actionResolvers.AggregateFollowingResolver,
    groupByFollowing: actionResolvers.GroupByFollowingResolver,
  },
  FollowRequest: {
    followRequest: actionResolvers.FindUniqueFollowRequestResolver,
    findFirstFollowRequest: actionResolvers.FindFirstFollowRequestResolver,
    followRequests: actionResolvers.FindManyFollowRequestResolver,
    createFollowRequest: actionResolvers.CreateFollowRequestResolver,
    createManyFollowRequest: actionResolvers.CreateManyFollowRequestResolver,
    deleteFollowRequest: actionResolvers.DeleteFollowRequestResolver,
    updateFollowRequest: actionResolvers.UpdateFollowRequestResolver,
    deleteManyFollowRequest: actionResolvers.DeleteManyFollowRequestResolver,
    updateManyFollowRequest: actionResolvers.UpdateManyFollowRequestResolver,
    upsertFollowRequest: actionResolvers.UpsertFollowRequestResolver,
    aggregateFollowRequest: actionResolvers.AggregateFollowRequestResolver,
    groupByFollowRequest: actionResolvers.GroupByFollowRequestResolver,
  },
  Message: {
    message: actionResolvers.FindUniqueMessageResolver,
    findFirstMessage: actionResolvers.FindFirstMessageResolver,
    messages: actionResolvers.FindManyMessageResolver,
    createMessage: actionResolvers.CreateMessageResolver,
    createManyMessage: actionResolvers.CreateManyMessageResolver,
    deleteMessage: actionResolvers.DeleteMessageResolver,
    updateMessage: actionResolvers.UpdateMessageResolver,
    deleteManyMessage: actionResolvers.DeleteManyMessageResolver,
    updateManyMessage: actionResolvers.UpdateManyMessageResolver,
    upsertMessage: actionResolvers.UpsertMessageResolver,
    aggregateMessage: actionResolvers.AggregateMessageResolver,
    groupByMessage: actionResolvers.GroupByMessageResolver,
  },
  Story: {
    story: actionResolvers.FindUniqueStoryResolver,
    findFirstStory: actionResolvers.FindFirstStoryResolver,
    stories: actionResolvers.FindManyStoryResolver,
    createStory: actionResolvers.CreateStoryResolver,
    createManyStory: actionResolvers.CreateManyStoryResolver,
    deleteStory: actionResolvers.DeleteStoryResolver,
    updateStory: actionResolvers.UpdateStoryResolver,
    deleteManyStory: actionResolvers.DeleteManyStoryResolver,
    updateManyStory: actionResolvers.UpdateManyStoryResolver,
    upsertStory: actionResolvers.UpsertStoryResolver,
    aggregateStory: actionResolvers.AggregateStoryResolver,
    groupByStory: actionResolvers.GroupByStoryResolver,
  },
  Activity: {
    activity: actionResolvers.FindUniqueActivityResolver,
    findFirstActivity: actionResolvers.FindFirstActivityResolver,
    activities: actionResolvers.FindManyActivityResolver,
    createActivity: actionResolvers.CreateActivityResolver,
    createManyActivity: actionResolvers.CreateManyActivityResolver,
    deleteActivity: actionResolvers.DeleteActivityResolver,
    updateActivity: actionResolvers.UpdateActivityResolver,
    deleteManyActivity: actionResolvers.DeleteManyActivityResolver,
    updateManyActivity: actionResolvers.UpdateManyActivityResolver,
    upsertActivity: actionResolvers.UpsertActivityResolver,
    aggregateActivity: actionResolvers.AggregateActivityResolver,
    groupByActivity: actionResolvers.GroupByActivityResolver,
  },
};
const crudResolversInfo = {
  User: [
    "user",
    "findFirstUser",
    "users",
    "createUser",
    "createManyUser",
    "deleteUser",
    "updateUser",
    "deleteManyUser",
    "updateManyUser",
    "upsertUser",
    "aggregateUser",
    "groupByUser",
  ],
  Profile: [
    "profile",
    "findFirstProfile",
    "profiles",
    "createProfile",
    "createManyProfile",
    "deleteProfile",
    "updateProfile",
    "deleteManyProfile",
    "updateManyProfile",
    "upsertProfile",
    "aggregateProfile",
    "groupByProfile",
  ],
  Settings: [
    "findUniqueSettings",
    "findFirstSettings",
    "findManySettings",
    "createSettings",
    "createManySettings",
    "deleteSettings",
    "updateSettings",
    "deleteManySettings",
    "updateManySettings",
    "upsertSettings",
    "aggregateSettings",
    "groupBySettings",
  ],
  Token: [
    "token",
    "findFirstToken",
    "tokens",
    "createToken",
    "createManyToken",
    "deleteToken",
    "updateToken",
    "deleteManyToken",
    "updateManyToken",
    "upsertToken",
    "aggregateToken",
    "groupByToken",
  ],
  Blocked: [
    "blocked",
    "findFirstBlocked",
    "blockeds",
    "createBlocked",
    "createManyBlocked",
    "deleteBlocked",
    "updateBlocked",
    "deleteManyBlocked",
    "updateManyBlocked",
    "upsertBlocked",
    "aggregateBlocked",
    "groupByBlocked",
  ],
  Post: [
    "post",
    "findFirstPost",
    "posts",
    "createPost",
    "createManyPost",
    "deletePost",
    "updatePost",
    "deleteManyPost",
    "updateManyPost",
    "upsertPost",
    "aggregatePost",
    "groupByPost",
  ],
  Poll: [
    "poll",
    "findFirstPoll",
    "polls",
    "createPoll",
    "createManyPoll",
    "deletePoll",
    "updatePoll",
    "deleteManyPoll",
    "updateManyPoll",
    "upsertPoll",
    "aggregatePoll",
    "groupByPoll",
  ],
  PollOption: [
    "pollOption",
    "findFirstPollOption",
    "pollOptions",
    "createPollOption",
    "createManyPollOption",
    "deletePollOption",
    "updatePollOption",
    "deleteManyPollOption",
    "updateManyPollOption",
    "upsertPollOption",
    "aggregatePollOption",
    "groupByPollOption",
  ],
  PollAnswer: [
    "pollAnswer",
    "findFirstPollAnswer",
    "pollAnswers",
    "createPollAnswer",
    "createManyPollAnswer",
    "deletePollAnswer",
    "updatePollAnswer",
    "deleteManyPollAnswer",
    "updateManyPollAnswer",
    "upsertPollAnswer",
    "aggregatePollAnswer",
    "groupByPollAnswer",
  ],
  Photo: [
    "photo",
    "findFirstPhoto",
    "photos",
    "createPhoto",
    "createManyPhoto",
    "deletePhoto",
    "updatePhoto",
    "deleteManyPhoto",
    "updateManyPhoto",
    "upsertPhoto",
    "aggregatePhoto",
    "groupByPhoto",
  ],
  Video: [
    "video",
    "findFirstVideo",
    "videos",
    "createVideo",
    "createManyVideo",
    "deleteVideo",
    "updateVideo",
    "deleteManyVideo",
    "updateManyVideo",
    "upsertVideo",
    "aggregateVideo",
    "groupByVideo",
  ],
  ClipAudio: [
    "clipAudio",
    "findFirstClipAudio",
    "clipAudios",
    "createClipAudio",
    "createManyClipAudio",
    "deleteClipAudio",
    "updateClipAudio",
    "deleteManyClipAudio",
    "updateManyClipAudio",
    "upsertClipAudio",
    "aggregateClipAudio",
    "groupByClipAudio",
  ],
  Clip: [
    "clip",
    "findFirstClip",
    "clips",
    "createClip",
    "createManyClip",
    "deleteClip",
    "updateClip",
    "deleteManyClip",
    "updateManyClip",
    "upsertClip",
    "aggregateClip",
    "groupByClip",
  ],
  Textual: [
    "textual",
    "findFirstTextual",
    "textuals",
    "createTextual",
    "createManyTextual",
    "deleteTextual",
    "updateTextual",
    "deleteManyTextual",
    "updateManyTextual",
    "upsertTextual",
    "aggregateTextual",
    "groupByTextual",
  ],
  Audio: [
    "findUniqueAudio",
    "findFirstAudio",
    "findManyAudio",
    "createAudio",
    "createManyAudio",
    "deleteAudio",
    "updateAudio",
    "deleteManyAudio",
    "updateManyAudio",
    "upsertAudio",
    "aggregateAudio",
    "groupByAudio",
  ],
  Tag: [
    "tag",
    "findFirstTag",
    "tags",
    "createTag",
    "createManyTag",
    "deleteTag",
    "updateTag",
    "deleteManyTag",
    "updateManyTag",
    "upsertTag",
    "aggregateTag",
    "groupByTag",
  ],
  Place: [
    "place",
    "findFirstPlace",
    "places",
    "createPlace",
    "createManyPlace",
    "deletePlace",
    "updatePlace",
    "deleteManyPlace",
    "updateManyPlace",
    "upsertPlace",
    "aggregatePlace",
    "groupByPlace",
  ],
  Like: [
    "like",
    "findFirstLike",
    "likes",
    "createLike",
    "createManyLike",
    "deleteLike",
    "updateLike",
    "deleteManyLike",
    "updateManyLike",
    "upsertLike",
    "aggregateLike",
    "groupByLike",
  ],
  Comment: [
    "comment",
    "findFirstComment",
    "comments",
    "createComment",
    "createManyComment",
    "deleteComment",
    "updateComment",
    "deleteManyComment",
    "updateManyComment",
    "upsertComment",
    "aggregateComment",
    "groupByComment",
  ],
  CommentReplies: [
    "findUniqueCommentReplies",
    "findFirstCommentReplies",
    "findManyCommentReplies",
    "createCommentReplies",
    "createManyCommentReplies",
    "deleteCommentReplies",
    "updateCommentReplies",
    "deleteManyCommentReplies",
    "updateManyCommentReplies",
    "upsertCommentReplies",
    "aggregateCommentReplies",
    "groupByCommentReplies",
  ],
  Follower: [
    "follower",
    "findFirstFollower",
    "followers",
    "createFollower",
    "createManyFollower",
    "deleteFollower",
    "updateFollower",
    "deleteManyFollower",
    "updateManyFollower",
    "upsertFollower",
    "aggregateFollower",
    "groupByFollower",
  ],
  Following: [
    "following",
    "findFirstFollowing",
    "followings",
    "createFollowing",
    "createManyFollowing",
    "deleteFollowing",
    "updateFollowing",
    "deleteManyFollowing",
    "updateManyFollowing",
    "upsertFollowing",
    "aggregateFollowing",
    "groupByFollowing",
  ],
  FollowRequest: [
    "followRequest",
    "findFirstFollowRequest",
    "followRequests",
    "createFollowRequest",
    "createManyFollowRequest",
    "deleteFollowRequest",
    "updateFollowRequest",
    "deleteManyFollowRequest",
    "updateManyFollowRequest",
    "upsertFollowRequest",
    "aggregateFollowRequest",
    "groupByFollowRequest",
  ],
  Message: [
    "message",
    "findFirstMessage",
    "messages",
    "createMessage",
    "createManyMessage",
    "deleteMessage",
    "updateMessage",
    "deleteManyMessage",
    "updateManyMessage",
    "upsertMessage",
    "aggregateMessage",
    "groupByMessage",
  ],
  Story: [
    "story",
    "findFirstStory",
    "stories",
    "createStory",
    "createManyStory",
    "deleteStory",
    "updateStory",
    "deleteManyStory",
    "updateManyStory",
    "upsertStory",
    "aggregateStory",
    "groupByStory",
  ],
  Activity: [
    "activity",
    "findFirstActivity",
    "activities",
    "createActivity",
    "createManyActivity",
    "deleteActivity",
    "updateActivity",
    "deleteManyActivity",
    "updateManyActivity",
    "upsertActivity",
    "aggregateActivity",
    "groupByActivity",
  ],
};
const argsInfo = {
  FindUniqueUserArgs: ["where"],
  FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateUserArgs: ["data"],
  CreateManyUserArgs: ["data", "skipDuplicates"],
  DeleteUserArgs: ["where"],
  UpdateUserArgs: ["data", "where"],
  DeleteManyUserArgs: ["where"],
  UpdateManyUserArgs: ["data", "where"],
  UpsertUserArgs: ["where", "create", "update"],
  AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueProfileArgs: ["where"],
  FindFirstProfileArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyProfileArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateProfileArgs: ["data"],
  CreateManyProfileArgs: ["data", "skipDuplicates"],
  DeleteProfileArgs: ["where"],
  UpdateProfileArgs: ["data", "where"],
  DeleteManyProfileArgs: ["where"],
  UpdateManyProfileArgs: ["data", "where"],
  UpsertProfileArgs: ["where", "create", "update"],
  AggregateProfileArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByProfileArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueSettingsArgs: ["where"],
  FindFirstSettingsArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManySettingsArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateSettingsArgs: ["data"],
  CreateManySettingsArgs: ["data", "skipDuplicates"],
  DeleteSettingsArgs: ["where"],
  UpdateSettingsArgs: ["data", "where"],
  DeleteManySettingsArgs: ["where"],
  UpdateManySettingsArgs: ["data", "where"],
  UpsertSettingsArgs: ["where", "create", "update"],
  AggregateSettingsArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySettingsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTokenArgs: ["where"],
  FindFirstTokenArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyTokenArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateTokenArgs: ["data"],
  CreateManyTokenArgs: ["data", "skipDuplicates"],
  DeleteTokenArgs: ["where"],
  UpdateTokenArgs: ["data", "where"],
  DeleteManyTokenArgs: ["where"],
  UpdateManyTokenArgs: ["data", "where"],
  UpsertTokenArgs: ["where", "create", "update"],
  AggregateTokenArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTokenArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueBlockedArgs: ["where"],
  FindFirstBlockedArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyBlockedArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateBlockedArgs: ["data"],
  CreateManyBlockedArgs: ["data", "skipDuplicates"],
  DeleteBlockedArgs: ["where"],
  UpdateBlockedArgs: ["data", "where"],
  DeleteManyBlockedArgs: ["where"],
  UpdateManyBlockedArgs: ["data", "where"],
  UpsertBlockedArgs: ["where", "create", "update"],
  AggregateBlockedArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByBlockedArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniquePostArgs: ["where"],
  FindFirstPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreatePostArgs: ["data"],
  CreateManyPostArgs: ["data", "skipDuplicates"],
  DeletePostArgs: ["where"],
  UpdatePostArgs: ["data", "where"],
  DeleteManyPostArgs: ["where"],
  UpdateManyPostArgs: ["data", "where"],
  UpsertPostArgs: ["where", "create", "update"],
  AggregatePostArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByPostArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniquePollArgs: ["where"],
  FindFirstPollArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyPollArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreatePollArgs: ["data"],
  CreateManyPollArgs: ["data", "skipDuplicates"],
  DeletePollArgs: ["where"],
  UpdatePollArgs: ["data", "where"],
  DeleteManyPollArgs: ["where"],
  UpdateManyPollArgs: ["data", "where"],
  UpsertPollArgs: ["where", "create", "update"],
  AggregatePollArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByPollArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniquePollOptionArgs: ["where"],
  FindFirstPollOptionArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyPollOptionArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreatePollOptionArgs: ["data"],
  CreateManyPollOptionArgs: ["data", "skipDuplicates"],
  DeletePollOptionArgs: ["where"],
  UpdatePollOptionArgs: ["data", "where"],
  DeleteManyPollOptionArgs: ["where"],
  UpdateManyPollOptionArgs: ["data", "where"],
  UpsertPollOptionArgs: ["where", "create", "update"],
  AggregatePollOptionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByPollOptionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniquePollAnswerArgs: ["where"],
  FindFirstPollAnswerArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyPollAnswerArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreatePollAnswerArgs: ["data"],
  CreateManyPollAnswerArgs: ["data", "skipDuplicates"],
  DeletePollAnswerArgs: ["where"],
  UpdatePollAnswerArgs: ["data", "where"],
  DeleteManyPollAnswerArgs: ["where"],
  UpdateManyPollAnswerArgs: ["data", "where"],
  UpsertPollAnswerArgs: ["where", "create", "update"],
  AggregatePollAnswerArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByPollAnswerArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniquePhotoArgs: ["where"],
  FindFirstPhotoArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyPhotoArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreatePhotoArgs: ["data"],
  CreateManyPhotoArgs: ["data", "skipDuplicates"],
  DeletePhotoArgs: ["where"],
  UpdatePhotoArgs: ["data", "where"],
  DeleteManyPhotoArgs: ["where"],
  UpdateManyPhotoArgs: ["data", "where"],
  UpsertPhotoArgs: ["where", "create", "update"],
  AggregatePhotoArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByPhotoArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueVideoArgs: ["where"],
  FindFirstVideoArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyVideoArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateVideoArgs: ["data"],
  CreateManyVideoArgs: ["data", "skipDuplicates"],
  DeleteVideoArgs: ["where"],
  UpdateVideoArgs: ["data", "where"],
  DeleteManyVideoArgs: ["where"],
  UpdateManyVideoArgs: ["data", "where"],
  UpsertVideoArgs: ["where", "create", "update"],
  AggregateVideoArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByVideoArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueClipAudioArgs: ["where"],
  FindFirstClipAudioArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyClipAudioArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateClipAudioArgs: ["data"],
  CreateManyClipAudioArgs: ["data", "skipDuplicates"],
  DeleteClipAudioArgs: ["where"],
  UpdateClipAudioArgs: ["data", "where"],
  DeleteManyClipAudioArgs: ["where"],
  UpdateManyClipAudioArgs: ["data", "where"],
  UpsertClipAudioArgs: ["where", "create", "update"],
  AggregateClipAudioArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByClipAudioArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueClipArgs: ["where"],
  FindFirstClipArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyClipArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateClipArgs: ["data"],
  CreateManyClipArgs: ["data", "skipDuplicates"],
  DeleteClipArgs: ["where"],
  UpdateClipArgs: ["data", "where"],
  DeleteManyClipArgs: ["where"],
  UpdateManyClipArgs: ["data", "where"],
  UpsertClipArgs: ["where", "create", "update"],
  AggregateClipArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByClipArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTextualArgs: ["where"],
  FindFirstTextualArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyTextualArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateTextualArgs: ["data"],
  CreateManyTextualArgs: ["data", "skipDuplicates"],
  DeleteTextualArgs: ["where"],
  UpdateTextualArgs: ["data", "where"],
  DeleteManyTextualArgs: ["where"],
  UpdateManyTextualArgs: ["data", "where"],
  UpsertTextualArgs: ["where", "create", "update"],
  AggregateTextualArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTextualArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueAudioArgs: ["where"],
  FindFirstAudioArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyAudioArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateAudioArgs: ["data"],
  CreateManyAudioArgs: ["data", "skipDuplicates"],
  DeleteAudioArgs: ["where"],
  UpdateAudioArgs: ["data", "where"],
  DeleteManyAudioArgs: ["where"],
  UpdateManyAudioArgs: ["data", "where"],
  UpsertAudioArgs: ["where", "create", "update"],
  AggregateAudioArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByAudioArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTagArgs: ["where"],
  FindFirstTagArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTagArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateTagArgs: ["data"],
  CreateManyTagArgs: ["data", "skipDuplicates"],
  DeleteTagArgs: ["where"],
  UpdateTagArgs: ["data", "where"],
  DeleteManyTagArgs: ["where"],
  UpdateManyTagArgs: ["data", "where"],
  UpsertTagArgs: ["where", "create", "update"],
  AggregateTagArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTagArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniquePlaceArgs: ["where"],
  FindFirstPlaceArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyPlaceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreatePlaceArgs: ["data"],
  CreateManyPlaceArgs: ["data", "skipDuplicates"],
  DeletePlaceArgs: ["where"],
  UpdatePlaceArgs: ["data", "where"],
  DeleteManyPlaceArgs: ["where"],
  UpdateManyPlaceArgs: ["data", "where"],
  UpsertPlaceArgs: ["where", "create", "update"],
  AggregatePlaceArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByPlaceArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueLikeArgs: ["where"],
  FindFirstLikeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLikeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateLikeArgs: ["data"],
  CreateManyLikeArgs: ["data", "skipDuplicates"],
  DeleteLikeArgs: ["where"],
  UpdateLikeArgs: ["data", "where"],
  DeleteManyLikeArgs: ["where"],
  UpdateManyLikeArgs: ["data", "where"],
  UpsertLikeArgs: ["where", "create", "update"],
  AggregateLikeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByLikeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCommentArgs: ["where"],
  FindFirstCommentArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyCommentArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateCommentArgs: ["data"],
  CreateManyCommentArgs: ["data", "skipDuplicates"],
  DeleteCommentArgs: ["where"],
  UpdateCommentArgs: ["data", "where"],
  DeleteManyCommentArgs: ["where"],
  UpdateManyCommentArgs: ["data", "where"],
  UpsertCommentArgs: ["where", "create", "update"],
  AggregateCommentArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCommentArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCommentRepliesArgs: ["where"],
  FindFirstCommentRepliesArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyCommentRepliesArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateCommentRepliesArgs: ["data"],
  CreateManyCommentRepliesArgs: ["data", "skipDuplicates"],
  DeleteCommentRepliesArgs: ["where"],
  UpdateCommentRepliesArgs: ["data", "where"],
  DeleteManyCommentRepliesArgs: ["where"],
  UpdateManyCommentRepliesArgs: ["data", "where"],
  UpsertCommentRepliesArgs: ["where", "create", "update"],
  AggregateCommentRepliesArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCommentRepliesArgs: [
    "where",
    "orderBy",
    "by",
    "having",
    "take",
    "skip",
  ],
  FindUniqueFollowerArgs: ["where"],
  FindFirstFollowerArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyFollowerArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateFollowerArgs: ["data"],
  CreateManyFollowerArgs: ["data", "skipDuplicates"],
  DeleteFollowerArgs: ["where"],
  UpdateFollowerArgs: ["data", "where"],
  DeleteManyFollowerArgs: ["where"],
  UpdateManyFollowerArgs: ["data", "where"],
  UpsertFollowerArgs: ["where", "create", "update"],
  AggregateFollowerArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFollowerArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFollowingArgs: ["where"],
  FindFirstFollowingArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyFollowingArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateFollowingArgs: ["data"],
  CreateManyFollowingArgs: ["data", "skipDuplicates"],
  DeleteFollowingArgs: ["where"],
  UpdateFollowingArgs: ["data", "where"],
  DeleteManyFollowingArgs: ["where"],
  UpdateManyFollowingArgs: ["data", "where"],
  UpsertFollowingArgs: ["where", "create", "update"],
  AggregateFollowingArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFollowingArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFollowRequestArgs: ["where"],
  FindFirstFollowRequestArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyFollowRequestArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateFollowRequestArgs: ["data"],
  CreateManyFollowRequestArgs: ["data", "skipDuplicates"],
  DeleteFollowRequestArgs: ["where"],
  UpdateFollowRequestArgs: ["data", "where"],
  DeleteManyFollowRequestArgs: ["where"],
  UpdateManyFollowRequestArgs: ["data", "where"],
  UpsertFollowRequestArgs: ["where", "create", "update"],
  AggregateFollowRequestArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFollowRequestArgs: [
    "where",
    "orderBy",
    "by",
    "having",
    "take",
    "skip",
  ],
  FindUniqueMessageArgs: ["where"],
  FindFirstMessageArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyMessageArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateMessageArgs: ["data"],
  CreateManyMessageArgs: ["data", "skipDuplicates"],
  DeleteMessageArgs: ["where"],
  UpdateMessageArgs: ["data", "where"],
  DeleteManyMessageArgs: ["where"],
  UpdateManyMessageArgs: ["data", "where"],
  UpsertMessageArgs: ["where", "create", "update"],
  AggregateMessageArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByMessageArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueStoryArgs: ["where"],
  FindFirstStoryArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyStoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateStoryArgs: ["data"],
  CreateManyStoryArgs: ["data", "skipDuplicates"],
  DeleteStoryArgs: ["where"],
  UpdateStoryArgs: ["data", "where"],
  DeleteManyStoryArgs: ["where"],
  UpdateManyStoryArgs: ["data", "where"],
  UpsertStoryArgs: ["where", "create", "update"],
  AggregateStoryArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByStoryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueActivityArgs: ["where"],
  FindFirstActivityArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyActivityArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  CreateActivityArgs: ["data"],
  CreateManyActivityArgs: ["data", "skipDuplicates"],
  DeleteActivityArgs: ["where"],
  UpdateActivityArgs: ["data", "where"],
  DeleteManyActivityArgs: ["where"],
  UpdateManyActivityArgs: ["data", "where"],
  UpsertActivityArgs: ["where", "create", "update"],
  AggregateActivityArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByActivityArgs: ["where", "orderBy", "by", "having", "take", "skip"],
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<TModel extends ResolverModelNames> =
  keyof typeof crudResolversMap[TModel]["prototype"];

export type ResolverActionsConfig<TModel extends ResolverModelNames> = Partial<
  Record<ModelResolverActionNames<TModel> | "_all", MethodDecorator[]>
>;

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName =
      resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    if (resolverActionsConfig._all) {
      const allActionsDecorators = resolverActionsConfig._all;
      const resolverActionNames =
        crudResolversInfo[modelName as keyof typeof crudResolversInfo];
      for (const resolverActionName of resolverActionNames) {
        const actionTarget = (
          actionResolversConfig[
            resolverActionName as keyof typeof actionResolversConfig
          ] as Function
        ).prototype;
        tslib.__decorate(
          allActionsDecorators,
          crudTarget,
          resolverActionName,
          null,
        );
        tslib.__decorate(
          allActionsDecorators,
          actionTarget,
          resolverActionName,
          null,
        );
      }
    }
    const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(
      it => it !== "_all",
    );
    for (const resolverActionName of resolverActionsToApply) {
      const decorators = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[];
      const actionTarget = (
        actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as Function
      ).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof typeof argsTypes[TArgsType]["prototype"],
  number | symbol
>;

type ArgFieldsConfig<TArgsType extends ArgsTypesNames> = FieldsConfig<
  ArgFieldNames<TArgsType>
>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap,
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName =
      argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo],
    );
  }
}

const relationResolversMap = {
  User: relationResolvers.UserRelationsResolver,
  Profile: relationResolvers.ProfileRelationsResolver,
  Settings: relationResolvers.SettingsRelationsResolver,
  Token: relationResolvers.TokenRelationsResolver,
  Blocked: relationResolvers.BlockedRelationsResolver,
  Post: relationResolvers.PostRelationsResolver,
  Poll: relationResolvers.PollRelationsResolver,
  PollOption: relationResolvers.PollOptionRelationsResolver,
  PollAnswer: relationResolvers.PollAnswerRelationsResolver,
  Photo: relationResolvers.PhotoRelationsResolver,
  Video: relationResolvers.VideoRelationsResolver,
  ClipAudio: relationResolvers.ClipAudioRelationsResolver,
  Clip: relationResolvers.ClipRelationsResolver,
  Textual: relationResolvers.TextualRelationsResolver,
  Audio: relationResolvers.AudioRelationsResolver,
  Tag: relationResolvers.TagRelationsResolver,
  Place: relationResolvers.PlaceRelationsResolver,
  Like: relationResolvers.LikeRelationsResolver,
  Comment: relationResolvers.CommentRelationsResolver,
  CommentReplies: relationResolvers.CommentRepliesRelationsResolver,
  Follower: relationResolvers.FollowerRelationsResolver,
  Following: relationResolvers.FollowingRelationsResolver,
  FollowRequest: relationResolvers.FollowRequestRelationsResolver,
  Message: relationResolvers.MessageRelationsResolver,
  Story: relationResolvers.StoryRelationsResolver,
  Activity: relationResolvers.ActivityRelationsResolver,
};
const relationResolversInfo = {
  User: [
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  Profile: ["user"],
  Settings: ["user"],
  Token: ["user"],
  Blocked: ["sourceUser", "targetUser"],
  Post: [
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  Poll: ["post", "pollOptions", "pollAnswers"],
  PollOption: ["poll", "pollAnswers"],
  PollAnswer: ["user", "poll", "pollOption"],
  Photo: ["post"],
  Video: ["post"],
  ClipAudio: ["clips"],
  Clip: ["post", "clipAudio"],
  Textual: ["post"],
  Audio: ["post"],
  Tag: ["posts"],
  Place: ["posts"],
  Like: ["post", "user"],
  Comment: ["post", "user", "commentReplies"],
  CommentReplies: ["repliedTo", "user"],
  Follower: ["user"],
  Following: ["user"],
  FollowRequest: ["sourceUser", "targetUser"],
  Message: [
    "post",
    "story",
    "sourceUser",
    "targetUser",
    "replyTo",
    "replyToMessage",
  ],
  Story: ["user", "message"],
  Activity: ["user", "post"],
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<TModel extends RelationResolverModelNames> =
  keyof typeof relationResolversMap[TModel]["prototype"];

export type RelationResolverActionsConfig<
  TModel extends RelationResolverModelNames,
> = Partial<
  Record<RelationResolverActionNames<TModel> | "_all", MethodDecorator[]>
>;

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap,
) {
  for (const relationResolversEnhanceMapKey of Object.keys(
    relationResolversEnhanceMap,
  )) {
    const modelName =
      relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig =
      relationResolversEnhanceMap[modelName]!;
    if (relationResolverActionsConfig._all) {
      const allActionsDecorators = relationResolverActionsConfig._all;
      const relationResolverActionNames =
        relationResolversInfo[modelName as keyof typeof relationResolversInfo];
      for (const relationResolverActionName of relationResolverActionNames) {
        tslib.__decorate(
          allActionsDecorators,
          relationResolverTarget,
          relationResolverActionName,
          null,
        );
      }
    }
    const relationResolverActionsToApply = Object.keys(
      relationResolverActionsConfig,
    ).filter(it => it !== "_all");
    for (const relationResolverActionName of relationResolverActionsToApply) {
      const decorators = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[];
      tslib.__decorate(
        decorators,
        relationResolverTarget,
        relationResolverActionName,
        null,
      );
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys | "_all", PropertyDecorator[]>
>;

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object,
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[],
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    if (enhanceConfig.fields._all) {
      const allFieldsDecorators = enhanceConfig.fields._all;
      for (const typeFieldName of typeFieldNames) {
        tslib.__decorate(
          allFieldsDecorators,
          typePrototype,
          typeFieldName,
          void 0,
        );
      }
    }
    const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(
      it => it !== "_all",
    );
    for (const typeFieldName of configFieldsToApply) {
      const fieldDecorators = enhanceConfig.fields[typeFieldName]!;
      tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  User: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
  ],
  Profile: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "userId",
  ],
  Settings: ["id", "userId"],
  Token: [
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  Blocked: ["id", "sourceUserId", "targetUserId", "createdAt", "updatedAt"],
  Post: [
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
  ],
  Poll: ["id", "question", "postId"],
  PollOption: ["id", "option", "pollId"],
  PollAnswer: ["id", "userId", "pollId", "pollOptionId"],
  Photo: ["id", "url", "postId"],
  Video: ["id", "thumbnailUrl", "url", "postId"],
  ClipAudio: ["id", "name", "audioUrl"],
  Clip: ["id", "url", "postId", "thumbnailUrl", "clipAudioId"],
  Textual: ["id", "text", "postId"],
  Audio: ["id", "url", "postId"],
  Tag: ["id", "name"],
  Place: ["id", "name", "address"],
  Like: ["id", "postId", "userId"],
  Comment: ["id", "comment", "postId", "userId"],
  CommentReplies: ["id", "comment", "repliedToId", "userId"],
  Follower: ["id", "userId", "createdAt", "updatedAt"],
  Following: ["id", "userId", "createdAt", "updatedAt"],
  FollowRequest: [
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  Message: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  Story: ["id", "mediaUrl", "link", "userId", "createdAt", "updatedAt"],
  Activity: ["id", "type", "userId", "postId", "createdAt", "updatedAt"],
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof typeof models[TModel]["prototype"],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo],
    );
  }
}

const outputsInfo = {
  AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
  UserGroupBy: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  AggregateProfile: ["_count", "_min", "_max"],
  ProfileGroupBy: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "userId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateSettings: ["_count", "_min", "_max"],
  SettingsGroupBy: ["id", "userId", "_count", "_min", "_max"],
  AggregateToken: ["_count", "_min", "_max"],
  TokenGroupBy: [
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
    "_count",
    "_min",
    "_max",
  ],
  AggregateBlocked: ["_count", "_min", "_max"],
  BlockedGroupBy: [
    "id",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
    "_count",
    "_min",
    "_max",
  ],
  AggregatePost: ["_count", "_min", "_max"],
  PostGroupBy: [
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
    "_count",
    "_min",
    "_max",
  ],
  AggregatePoll: ["_count", "_min", "_max"],
  PollGroupBy: ["id", "question", "postId", "_count", "_min", "_max"],
  AggregatePollOption: ["_count", "_min", "_max"],
  PollOptionGroupBy: ["id", "option", "pollId", "_count", "_min", "_max"],
  AggregatePollAnswer: ["_count", "_min", "_max"],
  PollAnswerGroupBy: [
    "id",
    "userId",
    "pollId",
    "pollOptionId",
    "_count",
    "_min",
    "_max",
  ],
  AggregatePhoto: ["_count", "_min", "_max"],
  PhotoGroupBy: ["id", "url", "postId", "_count", "_min", "_max"],
  AggregateVideo: ["_count", "_min", "_max"],
  VideoGroupBy: [
    "id",
    "thumbnailUrl",
    "url",
    "postId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateClipAudio: ["_count", "_min", "_max"],
  ClipAudioGroupBy: ["id", "name", "audioUrl", "_count", "_min", "_max"],
  AggregateClip: ["_count", "_min", "_max"],
  ClipGroupBy: [
    "id",
    "url",
    "postId",
    "thumbnailUrl",
    "clipAudioId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateTextual: ["_count", "_min", "_max"],
  TextualGroupBy: ["id", "text", "postId", "_count", "_min", "_max"],
  AggregateAudio: ["_count", "_min", "_max"],
  AudioGroupBy: ["id", "url", "postId", "_count", "_min", "_max"],
  AggregateTag: ["_count", "_min", "_max"],
  TagGroupBy: ["id", "name", "_count", "_min", "_max"],
  AggregatePlace: ["_count", "_min", "_max"],
  PlaceGroupBy: ["id", "name", "address", "_count", "_min", "_max"],
  AggregateLike: ["_count", "_min", "_max"],
  LikeGroupBy: ["id", "postId", "userId", "_count", "_min", "_max"],
  AggregateComment: ["_count", "_min", "_max"],
  CommentGroupBy: [
    "id",
    "comment",
    "postId",
    "userId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateCommentReplies: ["_count", "_min", "_max"],
  CommentRepliesGroupBy: [
    "id",
    "comment",
    "repliedToId",
    "userId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateFollower: ["_count", "_min", "_max"],
  FollowerGroupBy: [
    "id",
    "userId",
    "createdAt",
    "updatedAt",
    "_count",
    "_min",
    "_max",
  ],
  AggregateFollowing: ["_count", "_min", "_max"],
  FollowingGroupBy: [
    "id",
    "userId",
    "createdAt",
    "updatedAt",
    "_count",
    "_min",
    "_max",
  ],
  AggregateFollowRequest: ["_count", "_min", "_max"],
  FollowRequestGroupBy: [
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
    "_count",
    "_min",
    "_max",
  ],
  AggregateMessage: ["_count", "_min", "_max"],
  MessageGroupBy: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
    "_count",
    "_min",
    "_max",
  ],
  AggregateStory: ["_count", "_min", "_max"],
  StoryGroupBy: [
    "id",
    "mediaUrl",
    "link",
    "userId",
    "createdAt",
    "updatedAt",
    "_count",
    "_min",
    "_max",
  ],
  AggregateActivity: ["_count", "_min", "_max"],
  ActivityGroupBy: [
    "id",
    "type",
    "userId",
    "postId",
    "createdAt",
    "updatedAt",
    "_count",
    "_min",
    "_max",
  ],
  AffectedRowsOutput: ["count"],
  UserCount: [
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "pollAnswers",
    "commentReplies",
  ],
  UserCountAggregate: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "_all",
  ],
  UserAvgAggregate: ["loginAttempts"],
  UserSumAggregate: ["loginAttempts"],
  UserMinAggregate: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
  ],
  UserMaxAggregate: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
  ],
  ProfileCountAggregate: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "userId",
    "_all",
  ],
  ProfileMinAggregate: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "userId",
  ],
  ProfileMaxAggregate: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "userId",
  ],
  SettingsCountAggregate: ["id", "userId", "_all"],
  SettingsMinAggregate: ["id", "userId"],
  SettingsMaxAggregate: ["id", "userId"],
  TokenCountAggregate: [
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
    "_all",
  ],
  TokenMinAggregate: [
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  TokenMaxAggregate: [
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  BlockedCountAggregate: [
    "id",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
    "_all",
  ],
  BlockedMinAggregate: [
    "id",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  BlockedMaxAggregate: [
    "id",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  PostCount: ["tags", "photos", "likes", "comments", "activities", "message"],
  PostCountAggregate: [
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
    "_all",
  ],
  PostMinAggregate: [
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
  ],
  PostMaxAggregate: [
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
  ],
  PollCount: ["pollOptions", "pollAnswers"],
  PollCountAggregate: ["id", "question", "postId", "_all"],
  PollMinAggregate: ["id", "question", "postId"],
  PollMaxAggregate: ["id", "question", "postId"],
  PollOptionCount: ["pollAnswers"],
  PollOptionCountAggregate: ["id", "option", "pollId", "_all"],
  PollOptionMinAggregate: ["id", "option", "pollId"],
  PollOptionMaxAggregate: ["id", "option", "pollId"],
  PollAnswerCountAggregate: ["id", "userId", "pollId", "pollOptionId", "_all"],
  PollAnswerMinAggregate: ["id", "userId", "pollId", "pollOptionId"],
  PollAnswerMaxAggregate: ["id", "userId", "pollId", "pollOptionId"],
  PhotoCountAggregate: ["id", "url", "postId", "_all"],
  PhotoMinAggregate: ["id", "url", "postId"],
  PhotoMaxAggregate: ["id", "url", "postId"],
  VideoCountAggregate: ["id", "thumbnailUrl", "url", "postId", "_all"],
  VideoMinAggregate: ["id", "thumbnailUrl", "url", "postId"],
  VideoMaxAggregate: ["id", "thumbnailUrl", "url", "postId"],
  ClipAudioCount: ["clips"],
  ClipAudioCountAggregate: ["id", "name", "audioUrl", "_all"],
  ClipAudioMinAggregate: ["id", "name", "audioUrl"],
  ClipAudioMaxAggregate: ["id", "name", "audioUrl"],
  ClipCountAggregate: [
    "id",
    "url",
    "postId",
    "thumbnailUrl",
    "clipAudioId",
    "_all",
  ],
  ClipMinAggregate: ["id", "url", "postId", "thumbnailUrl", "clipAudioId"],
  ClipMaxAggregate: ["id", "url", "postId", "thumbnailUrl", "clipAudioId"],
  TextualCountAggregate: ["id", "text", "postId", "_all"],
  TextualMinAggregate: ["id", "text", "postId"],
  TextualMaxAggregate: ["id", "text", "postId"],
  AudioCountAggregate: ["id", "url", "postId", "_all"],
  AudioMinAggregate: ["id", "url", "postId"],
  AudioMaxAggregate: ["id", "url", "postId"],
  TagCount: ["posts"],
  TagCountAggregate: ["id", "name", "_all"],
  TagMinAggregate: ["id", "name"],
  TagMaxAggregate: ["id", "name"],
  PlaceCount: ["posts"],
  PlaceCountAggregate: ["id", "name", "address", "_all"],
  PlaceMinAggregate: ["id", "name", "address"],
  PlaceMaxAggregate: ["id", "name", "address"],
  LikeCountAggregate: ["id", "postId", "userId", "_all"],
  LikeMinAggregate: ["id", "postId", "userId"],
  LikeMaxAggregate: ["id", "postId", "userId"],
  CommentCount: ["commentReplies"],
  CommentCountAggregate: ["id", "comment", "postId", "userId", "_all"],
  CommentMinAggregate: ["id", "comment", "postId", "userId"],
  CommentMaxAggregate: ["id", "comment", "postId", "userId"],
  CommentRepliesCountAggregate: [
    "id",
    "comment",
    "repliedToId",
    "userId",
    "_all",
  ],
  CommentRepliesMinAggregate: ["id", "comment", "repliedToId", "userId"],
  CommentRepliesMaxAggregate: ["id", "comment", "repliedToId", "userId"],
  FollowerCountAggregate: ["id", "userId", "createdAt", "updatedAt", "_all"],
  FollowerMinAggregate: ["id", "userId", "createdAt", "updatedAt"],
  FollowerMaxAggregate: ["id", "userId", "createdAt", "updatedAt"],
  FollowingCountAggregate: ["id", "userId", "createdAt", "updatedAt", "_all"],
  FollowingMinAggregate: ["id", "userId", "createdAt", "updatedAt"],
  FollowingMaxAggregate: ["id", "userId", "createdAt", "updatedAt"],
  FollowRequestCountAggregate: [
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
    "_all",
  ],
  FollowRequestMinAggregate: [
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  FollowRequestMaxAggregate: [
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  MessageCount: ["replyToMessage"],
  MessageCountAggregate: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
    "_all",
  ],
  MessageMinAggregate: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  MessageMaxAggregate: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  StoryCount: ["message"],
  StoryCountAggregate: [
    "id",
    "mediaUrl",
    "link",
    "userId",
    "createdAt",
    "updatedAt",
    "_all",
  ],
  StoryMinAggregate: [
    "id",
    "mediaUrl",
    "link",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  StoryMaxAggregate: [
    "id",
    "mediaUrl",
    "link",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  ActivityCountAggregate: [
    "id",
    "type",
    "userId",
    "postId",
    "createdAt",
    "updatedAt",
    "_all",
  ],
  ActivityMinAggregate: [
    "id",
    "type",
    "userId",
    "postId",
    "createdAt",
    "updatedAt",
  ],
  ActivityMaxAggregate: [
    "id",
    "type",
    "userId",
    "postId",
    "createdAt",
    "updatedAt",
  ],
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof typeof outputTypes[TOutput]["prototype"],
  number | symbol
>;

type OutputTypeFieldsConfig<TOutput extends OutputTypesNames> = FieldsConfig<
  OutputTypeFieldNames<TOutput>
>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap,
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName =
      outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo],
    );
  }
}

const inputsInfo = {
  UserWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserOrderByWithRelationInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserWhereUniqueInput: ["id", "email", "username"],
  UserOrderByWithAggregationInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "_count",
    "_avg",
    "_max",
    "_min",
    "_sum",
  ],
  UserScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
  ],
  ProfileWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "user",
    "userId",
  ],
  ProfileOrderByWithRelationInput: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "user",
    "userId",
  ],
  ProfileWhereUniqueInput: ["id", "mobileNo", "userId"],
  ProfileOrderByWithAggregationInput: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "userId",
    "_count",
    "_max",
    "_min",
  ],
  ProfileScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "userId",
  ],
  SettingsWhereInput: ["AND", "OR", "NOT", "id", "user", "userId"],
  SettingsOrderByWithRelationInput: ["id", "user", "userId"],
  SettingsWhereUniqueInput: ["id", "userId"],
  SettingsOrderByWithAggregationInput: [
    "id",
    "userId",
    "_count",
    "_max",
    "_min",
  ],
  SettingsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId"],
  TokenWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "user",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  TokenOrderByWithRelationInput: [
    "id",
    "user",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  TokenWhereUniqueInput: ["id", "token"],
  TokenOrderByWithAggregationInput: [
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
    "_count",
    "_max",
    "_min",
  ],
  TokenScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  BlockedWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "sourceUser",
    "sourceUserId",
    "targetUser",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  BlockedOrderByWithRelationInput: [
    "id",
    "sourceUser",
    "sourceUserId",
    "targetUser",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  BlockedWhereUniqueInput: ["id"],
  BlockedOrderByWithAggregationInput: [
    "id",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
    "_count",
    "_max",
    "_min",
  ],
  BlockedScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  PostWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "user",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "tags",
    "place",
    "placeId",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "archive",
    "published",
    "slug",
    "message",
  ],
  PostOrderByWithRelationInput: [
    "id",
    "user",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "tags",
    "place",
    "placeId",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "archive",
    "published",
    "slug",
    "message",
  ],
  PostWhereUniqueInput: ["id", "slug"],
  PostOrderByWithAggregationInput: [
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
    "_count",
    "_max",
    "_min",
  ],
  PostScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
  ],
  PollWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "question",
    "post",
    "postId",
    "pollOptions",
    "pollAnswers",
  ],
  PollOrderByWithRelationInput: [
    "id",
    "question",
    "post",
    "postId",
    "pollOptions",
    "pollAnswers",
  ],
  PollWhereUniqueInput: ["id", "postId"],
  PollOrderByWithAggregationInput: [
    "id",
    "question",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  PollScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "question",
    "postId",
  ],
  PollOptionWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "option",
    "poll",
    "pollId",
    "pollAnswers",
  ],
  PollOptionOrderByWithRelationInput: [
    "id",
    "option",
    "poll",
    "pollId",
    "pollAnswers",
  ],
  PollOptionWhereUniqueInput: ["id"],
  PollOptionOrderByWithAggregationInput: [
    "id",
    "option",
    "pollId",
    "_count",
    "_max",
    "_min",
  ],
  PollOptionScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "option",
    "pollId",
  ],
  PollAnswerWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "user",
    "userId",
    "poll",
    "pollId",
    "pollOption",
    "pollOptionId",
  ],
  PollAnswerOrderByWithRelationInput: [
    "id",
    "user",
    "userId",
    "poll",
    "pollId",
    "pollOption",
    "pollOptionId",
  ],
  PollAnswerWhereUniqueInput: ["id", "userId", "pollId", "pollOptionId"],
  PollAnswerOrderByWithAggregationInput: [
    "id",
    "userId",
    "pollId",
    "pollOptionId",
    "_count",
    "_max",
    "_min",
  ],
  PollAnswerScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "pollId",
    "pollOptionId",
  ],
  PhotoWhereInput: ["AND", "OR", "NOT", "id", "url", "post", "postId"],
  PhotoOrderByWithRelationInput: ["id", "url", "post", "postId"],
  PhotoWhereUniqueInput: ["id"],
  PhotoOrderByWithAggregationInput: [
    "id",
    "url",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  PhotoScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "url",
    "postId",
  ],
  VideoWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "thumbnailUrl",
    "url",
    "post",
    "postId",
  ],
  VideoOrderByWithRelationInput: [
    "id",
    "thumbnailUrl",
    "url",
    "post",
    "postId",
  ],
  VideoWhereUniqueInput: ["id", "postId"],
  VideoOrderByWithAggregationInput: [
    "id",
    "thumbnailUrl",
    "url",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  VideoScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "thumbnailUrl",
    "url",
    "postId",
  ],
  ClipAudioWhereInput: ["AND", "OR", "NOT", "id", "name", "audioUrl", "clips"],
  ClipAudioOrderByWithRelationInput: ["id", "name", "audioUrl", "clips"],
  ClipAudioWhereUniqueInput: ["id"],
  ClipAudioOrderByWithAggregationInput: [
    "id",
    "name",
    "audioUrl",
    "_count",
    "_max",
    "_min",
  ],
  ClipAudioScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "audioUrl",
  ],
  ClipWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "url",
    "post",
    "postId",
    "thumbnailUrl",
    "clipAudio",
    "clipAudioId",
  ],
  ClipOrderByWithRelationInput: [
    "id",
    "url",
    "post",
    "postId",
    "thumbnailUrl",
    "clipAudio",
    "clipAudioId",
  ],
  ClipWhereUniqueInput: ["id", "postId"],
  ClipOrderByWithAggregationInput: [
    "id",
    "url",
    "postId",
    "thumbnailUrl",
    "clipAudioId",
    "_count",
    "_max",
    "_min",
  ],
  ClipScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "url",
    "postId",
    "thumbnailUrl",
    "clipAudioId",
  ],
  TextualWhereInput: ["AND", "OR", "NOT", "id", "text", "post", "postId"],
  TextualOrderByWithRelationInput: ["id", "text", "post", "postId"],
  TextualWhereUniqueInput: ["id", "postId"],
  TextualOrderByWithAggregationInput: [
    "id",
    "text",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  TextualScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "text",
    "postId",
  ],
  AudioWhereInput: ["AND", "OR", "NOT", "id", "url", "post", "postId"],
  AudioOrderByWithRelationInput: ["id", "url", "post", "postId"],
  AudioWhereUniqueInput: ["id", "postId"],
  AudioOrderByWithAggregationInput: [
    "id",
    "url",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  AudioScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "url",
    "postId",
  ],
  TagWhereInput: ["AND", "OR", "NOT", "id", "name", "posts"],
  TagOrderByWithRelationInput: ["id", "name", "posts"],
  TagWhereUniqueInput: ["id", "name"],
  TagOrderByWithAggregationInput: ["id", "name", "_count", "_max", "_min"],
  TagScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name"],
  PlaceWhereInput: ["AND", "OR", "NOT", "id", "name", "address", "posts"],
  PlaceOrderByWithRelationInput: ["id", "name", "address", "posts"],
  PlaceWhereUniqueInput: ["id", "address"],
  PlaceOrderByWithAggregationInput: [
    "id",
    "name",
    "address",
    "_count",
    "_max",
    "_min",
  ],
  PlaceScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "name",
    "address",
  ],
  LikeWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "post",
    "postId",
    "user",
    "userId",
  ],
  LikeOrderByWithRelationInput: ["id", "post", "postId", "user", "userId"],
  LikeWhereUniqueInput: ["id"],
  LikeOrderByWithAggregationInput: [
    "id",
    "postId",
    "userId",
    "_count",
    "_max",
    "_min",
  ],
  LikeScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "postId",
    "userId",
  ],
  CommentWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "comment",
    "post",
    "postId",
    "user",
    "userId",
    "commentReplies",
  ],
  CommentOrderByWithRelationInput: [
    "id",
    "comment",
    "post",
    "postId",
    "user",
    "userId",
    "commentReplies",
  ],
  CommentWhereUniqueInput: ["id"],
  CommentOrderByWithAggregationInput: [
    "id",
    "comment",
    "postId",
    "userId",
    "_count",
    "_max",
    "_min",
  ],
  CommentScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "comment",
    "postId",
    "userId",
  ],
  CommentRepliesWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "comment",
    "repliedTo",
    "repliedToId",
    "user",
    "userId",
  ],
  CommentRepliesOrderByWithRelationInput: [
    "id",
    "comment",
    "repliedTo",
    "repliedToId",
    "user",
    "userId",
  ],
  CommentRepliesWhereUniqueInput: ["id"],
  CommentRepliesOrderByWithAggregationInput: [
    "id",
    "comment",
    "repliedToId",
    "userId",
    "_count",
    "_max",
    "_min",
  ],
  CommentRepliesScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "comment",
    "repliedToId",
    "userId",
  ],
  FollowerWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "user",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  FollowerOrderByWithRelationInput: [
    "id",
    "user",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  FollowerWhereUniqueInput: ["id"],
  FollowerOrderByWithAggregationInput: [
    "id",
    "userId",
    "createdAt",
    "updatedAt",
    "_count",
    "_max",
    "_min",
  ],
  FollowerScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  FollowingWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "user",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  FollowingOrderByWithRelationInput: [
    "id",
    "user",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  FollowingWhereUniqueInput: ["id"],
  FollowingOrderByWithAggregationInput: [
    "id",
    "userId",
    "createdAt",
    "updatedAt",
    "_count",
    "_max",
    "_min",
  ],
  FollowingScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  FollowRequestWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "message",
    "sourceUser",
    "sourceUserId",
    "targetUser",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  FollowRequestOrderByWithRelationInput: [
    "id",
    "message",
    "sourceUser",
    "sourceUserId",
    "targetUser",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  FollowRequestWhereUniqueInput: ["id"],
  FollowRequestOrderByWithAggregationInput: [
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
    "_count",
    "_max",
    "_min",
  ],
  FollowRequestScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  MessageWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "message",
    "mediaUrl",
    "post",
    "postId",
    "story",
    "storyId",
    "sourceUser",
    "sourceUserId",
    "targetUser",
    "targetUserId",
    "replyToId",
    "replyTo",
    "replyToMessage",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  MessageOrderByWithRelationInput: [
    "id",
    "message",
    "mediaUrl",
    "post",
    "postId",
    "story",
    "storyId",
    "sourceUser",
    "sourceUserId",
    "targetUser",
    "targetUserId",
    "replyToId",
    "replyTo",
    "replyToMessage",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  MessageWhereUniqueInput: ["id"],
  MessageOrderByWithAggregationInput: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
    "_count",
    "_max",
    "_min",
  ],
  MessageScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  StoryWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "mediaUrl",
    "link",
    "user",
    "userId",
    "createdAt",
    "updatedAt",
    "message",
  ],
  StoryOrderByWithRelationInput: [
    "id",
    "mediaUrl",
    "link",
    "user",
    "userId",
    "createdAt",
    "updatedAt",
    "message",
  ],
  StoryWhereUniqueInput: ["id"],
  StoryOrderByWithAggregationInput: [
    "id",
    "mediaUrl",
    "link",
    "userId",
    "createdAt",
    "updatedAt",
    "_count",
    "_max",
    "_min",
  ],
  StoryScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "mediaUrl",
    "link",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  ActivityWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "type",
    "user",
    "userId",
    "post",
    "postId",
    "createdAt",
    "updatedAt",
  ],
  ActivityOrderByWithRelationInput: [
    "id",
    "type",
    "user",
    "userId",
    "post",
    "postId",
    "createdAt",
    "updatedAt",
  ],
  ActivityWhereUniqueInput: ["id"],
  ActivityOrderByWithAggregationInput: [
    "id",
    "type",
    "userId",
    "postId",
    "createdAt",
    "updatedAt",
    "_count",
    "_max",
    "_min",
  ],
  ActivityScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "type",
    "userId",
    "postId",
    "createdAt",
    "updatedAt",
  ],
  UserCreateInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserUpdateInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateManyInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
  ],
  UserUpdateManyMutationInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
  ],
  ProfileCreateInput: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "user",
  ],
  ProfileUpdateInput: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "user",
  ],
  ProfileCreateManyInput: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "userId",
  ],
  ProfileUpdateManyMutationInput: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
  ],
  SettingsCreateInput: ["id", "user"],
  SettingsUpdateInput: ["id", "user"],
  SettingsCreateManyInput: ["id", "userId"],
  SettingsUpdateManyMutationInput: ["id"],
  TokenCreateInput: [
    "id",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
    "user",
  ],
  TokenUpdateInput: [
    "id",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
    "user",
  ],
  TokenCreateManyInput: [
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  TokenUpdateManyMutationInput: [
    "id",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  BlockedCreateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "sourceUser",
    "targetUser",
  ],
  BlockedUpdateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "sourceUser",
    "targetUser",
  ],
  BlockedCreateManyInput: [
    "id",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  BlockedUpdateManyMutationInput: ["id", "createdAt", "updatedAt"],
  PostCreateInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostUpdateInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateManyInput: [
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
  ],
  PostUpdateManyMutationInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
  ],
  PollCreateInput: ["id", "question", "post", "pollOptions", "pollAnswers"],
  PollUpdateInput: ["id", "question", "post", "pollOptions", "pollAnswers"],
  PollCreateManyInput: ["id", "question", "postId"],
  PollUpdateManyMutationInput: ["id", "question"],
  PollOptionCreateInput: ["id", "option", "poll", "pollAnswers"],
  PollOptionUpdateInput: ["id", "option", "poll", "pollAnswers"],
  PollOptionCreateManyInput: ["id", "option", "pollId"],
  PollOptionUpdateManyMutationInput: ["id", "option"],
  PollAnswerCreateInput: ["id", "user", "poll", "pollOption"],
  PollAnswerUpdateInput: ["id", "user", "poll", "pollOption"],
  PollAnswerCreateManyInput: ["id", "userId", "pollId", "pollOptionId"],
  PollAnswerUpdateManyMutationInput: ["id"],
  PhotoCreateInput: ["id", "url", "post"],
  PhotoUpdateInput: ["id", "url", "post"],
  PhotoCreateManyInput: ["id", "url", "postId"],
  PhotoUpdateManyMutationInput: ["id", "url"],
  VideoCreateInput: ["id", "thumbnailUrl", "url", "post"],
  VideoUpdateInput: ["id", "thumbnailUrl", "url", "post"],
  VideoCreateManyInput: ["id", "thumbnailUrl", "url", "postId"],
  VideoUpdateManyMutationInput: ["id", "thumbnailUrl", "url"],
  ClipAudioCreateInput: ["id", "name", "audioUrl", "clips"],
  ClipAudioUpdateInput: ["id", "name", "audioUrl", "clips"],
  ClipAudioCreateManyInput: ["id", "name", "audioUrl"],
  ClipAudioUpdateManyMutationInput: ["id", "name", "audioUrl"],
  ClipCreateInput: ["id", "url", "thumbnailUrl", "post", "clipAudio"],
  ClipUpdateInput: ["id", "url", "thumbnailUrl", "post", "clipAudio"],
  ClipCreateManyInput: ["id", "url", "postId", "thumbnailUrl", "clipAudioId"],
  ClipUpdateManyMutationInput: ["id", "url", "thumbnailUrl"],
  TextualCreateInput: ["id", "text", "post"],
  TextualUpdateInput: ["id", "text", "post"],
  TextualCreateManyInput: ["id", "text", "postId"],
  TextualUpdateManyMutationInput: ["id", "text"],
  AudioCreateInput: ["id", "url", "post"],
  AudioUpdateInput: ["id", "url", "post"],
  AudioCreateManyInput: ["id", "url", "postId"],
  AudioUpdateManyMutationInput: ["id", "url"],
  TagCreateInput: ["id", "name", "posts"],
  TagUpdateInput: ["id", "name", "posts"],
  TagCreateManyInput: ["id", "name"],
  TagUpdateManyMutationInput: ["id", "name"],
  PlaceCreateInput: ["id", "name", "address", "posts"],
  PlaceUpdateInput: ["id", "name", "address", "posts"],
  PlaceCreateManyInput: ["id", "name", "address"],
  PlaceUpdateManyMutationInput: ["id", "name", "address"],
  LikeCreateInput: ["id", "post", "user"],
  LikeUpdateInput: ["id", "post", "user"],
  LikeCreateManyInput: ["id", "postId", "userId"],
  LikeUpdateManyMutationInput: ["id"],
  CommentCreateInput: ["id", "comment", "post", "user", "commentReplies"],
  CommentUpdateInput: ["id", "comment", "post", "user", "commentReplies"],
  CommentCreateManyInput: ["id", "comment", "postId", "userId"],
  CommentUpdateManyMutationInput: ["id", "comment"],
  CommentRepliesCreateInput: ["id", "comment", "repliedTo", "user"],
  CommentRepliesUpdateInput: ["id", "comment", "repliedTo", "user"],
  CommentRepliesCreateManyInput: ["id", "comment", "repliedToId", "userId"],
  CommentRepliesUpdateManyMutationInput: ["id", "comment"],
  FollowerCreateInput: ["id", "createdAt", "updatedAt", "user"],
  FollowerUpdateInput: ["id", "createdAt", "updatedAt", "user"],
  FollowerCreateManyInput: ["id", "userId", "createdAt", "updatedAt"],
  FollowerUpdateManyMutationInput: ["id", "createdAt", "updatedAt"],
  FollowingCreateInput: ["id", "createdAt", "updatedAt", "user"],
  FollowingUpdateInput: ["id", "createdAt", "updatedAt", "user"],
  FollowingCreateManyInput: ["id", "userId", "createdAt", "updatedAt"],
  FollowingUpdateManyMutationInput: ["id", "createdAt", "updatedAt"],
  FollowRequestCreateInput: [
    "id",
    "message",
    "createdAt",
    "updatedAt",
    "sourceUser",
    "targetUser",
  ],
  FollowRequestUpdateInput: [
    "id",
    "message",
    "createdAt",
    "updatedAt",
    "sourceUser",
    "targetUser",
  ],
  FollowRequestCreateManyInput: [
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  FollowRequestUpdateManyMutationInput: [
    "id",
    "message",
    "createdAt",
    "updatedAt",
  ],
  MessageCreateInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "story",
    "sourceUser",
    "targetUser",
    "replyTo",
    "replyToMessage",
  ],
  MessageUpdateInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "story",
    "sourceUser",
    "targetUser",
    "replyTo",
    "replyToMessage",
  ],
  MessageCreateManyInput: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  MessageUpdateManyMutationInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  StoryCreateInput: [
    "id",
    "mediaUrl",
    "link",
    "createdAt",
    "updatedAt",
    "user",
    "message",
  ],
  StoryUpdateInput: [
    "id",
    "mediaUrl",
    "link",
    "createdAt",
    "updatedAt",
    "user",
    "message",
  ],
  StoryCreateManyInput: [
    "id",
    "mediaUrl",
    "link",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  StoryUpdateManyMutationInput: [
    "id",
    "mediaUrl",
    "link",
    "createdAt",
    "updatedAt",
  ],
  ActivityCreateInput: ["id", "type", "createdAt", "updatedAt", "user", "post"],
  ActivityUpdateInput: ["id", "type", "createdAt", "updatedAt", "user", "post"],
  ActivityCreateManyInput: [
    "id",
    "type",
    "userId",
    "postId",
    "createdAt",
    "updatedAt",
  ],
  ActivityUpdateManyMutationInput: ["id", "type", "createdAt", "updatedAt"],
  StringFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
  ],
  StringNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
  ],
  EnumRoleFilter: ["equals", "in", "notIn", "not"],
  EnumAccountTypeFilter: ["equals", "in", "notIn", "not"],
  BoolFilter: ["equals", "not"],
  DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  ProfileRelationFilter: ["is", "isNot"],
  TokenListRelationFilter: ["every", "some", "none"],
  PostListRelationFilter: ["every", "some", "none"],
  LikeListRelationFilter: ["every", "some", "none"],
  CommentListRelationFilter: ["every", "some", "none"],
  FollowerListRelationFilter: ["every", "some", "none"],
  FollowingListRelationFilter: ["every", "some", "none"],
  FollowRequestListRelationFilter: ["every", "some", "none"],
  MessageListRelationFilter: ["every", "some", "none"],
  StoryListRelationFilter: ["every", "some", "none"],
  ActivityListRelationFilter: ["every", "some", "none"],
  BlockedListRelationFilter: ["every", "some", "none"],
  SettingsRelationFilter: ["is", "isNot"],
  PollAnswerListRelationFilter: ["every", "some", "none"],
  CommentRepliesListRelationFilter: ["every", "some", "none"],
  TokenOrderByRelationAggregateInput: ["_count"],
  PostOrderByRelationAggregateInput: ["_count"],
  LikeOrderByRelationAggregateInput: ["_count"],
  CommentOrderByRelationAggregateInput: ["_count"],
  FollowerOrderByRelationAggregateInput: ["_count"],
  FollowingOrderByRelationAggregateInput: ["_count"],
  FollowRequestOrderByRelationAggregateInput: ["_count"],
  MessageOrderByRelationAggregateInput: ["_count"],
  StoryOrderByRelationAggregateInput: ["_count"],
  ActivityOrderByRelationAggregateInput: ["_count"],
  BlockedOrderByRelationAggregateInput: ["_count"],
  PollAnswerOrderByRelationAggregateInput: ["_count"],
  CommentRepliesOrderByRelationAggregateInput: ["_count"],
  UserCountOrderByAggregateInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
  ],
  UserAvgOrderByAggregateInput: ["loginAttempts"],
  UserMaxOrderByAggregateInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
  ],
  UserMinOrderByAggregateInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
  ],
  UserSumOrderByAggregateInput: ["loginAttempts"],
  StringWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  StringNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  EnumRoleWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  EnumAccountTypeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  DateTimeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  IntWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  EnumGenderNullableFilter: ["equals", "in", "notIn", "not"],
  DateTimeNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
  ],
  EnumInterestedInTypesNullableFilter: ["equals", "in", "notIn", "not"],
  EnumRelationshipStatusNullableFilter: ["equals", "in", "notIn", "not"],
  UserRelationFilter: ["is", "isNot"],
  ProfileCountOrderByAggregateInput: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "userId",
  ],
  ProfileMaxOrderByAggregateInput: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "userId",
  ],
  ProfileMinOrderByAggregateInput: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
    "userId",
  ],
  EnumGenderNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  DateTimeNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  EnumInterestedInTypesNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  EnumRelationshipStatusNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  SettingsCountOrderByAggregateInput: ["id", "userId"],
  SettingsMaxOrderByAggregateInput: ["id", "userId"],
  SettingsMinOrderByAggregateInput: ["id", "userId"],
  EnumTokenTypeFilter: ["equals", "in", "notIn", "not"],
  TokenCountOrderByAggregateInput: [
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  TokenMaxOrderByAggregateInput: [
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  TokenMinOrderByAggregateInput: [
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  EnumTokenTypeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  BlockedCountOrderByAggregateInput: [
    "id",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  BlockedMaxOrderByAggregateInput: [
    "id",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  BlockedMinOrderByAggregateInput: [
    "id",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  EnumPostTypeFilter: ["equals", "in", "notIn", "not"],
  TagListRelationFilter: ["every", "some", "none"],
  PlaceRelationFilter: ["is", "isNot"],
  PollRelationFilter: ["is", "isNot"],
  PhotoListRelationFilter: ["every", "some", "none"],
  VideoRelationFilter: ["is", "isNot"],
  ClipRelationFilter: ["is", "isNot"],
  TextualRelationFilter: ["is", "isNot"],
  AudioRelationFilter: ["is", "isNot"],
  TagOrderByRelationAggregateInput: ["_count"],
  PhotoOrderByRelationAggregateInput: ["_count"],
  PostCountOrderByAggregateInput: [
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
  ],
  PostMaxOrderByAggregateInput: [
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
  ],
  PostMinOrderByAggregateInput: [
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
  ],
  EnumPostTypeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  PostRelationFilter: ["is", "isNot"],
  PollOptionListRelationFilter: ["every", "some", "none"],
  PollOptionOrderByRelationAggregateInput: ["_count"],
  PollCountOrderByAggregateInput: ["id", "question", "postId"],
  PollMaxOrderByAggregateInput: ["id", "question", "postId"],
  PollMinOrderByAggregateInput: ["id", "question", "postId"],
  PollOptionCountOrderByAggregateInput: ["id", "option", "pollId"],
  PollOptionMaxOrderByAggregateInput: ["id", "option", "pollId"],
  PollOptionMinOrderByAggregateInput: ["id", "option", "pollId"],
  PollOptionRelationFilter: ["is", "isNot"],
  PollAnswerCountOrderByAggregateInput: [
    "id",
    "userId",
    "pollId",
    "pollOptionId",
  ],
  PollAnswerMaxOrderByAggregateInput: [
    "id",
    "userId",
    "pollId",
    "pollOptionId",
  ],
  PollAnswerMinOrderByAggregateInput: [
    "id",
    "userId",
    "pollId",
    "pollOptionId",
  ],
  PhotoCountOrderByAggregateInput: ["id", "url", "postId"],
  PhotoMaxOrderByAggregateInput: ["id", "url", "postId"],
  PhotoMinOrderByAggregateInput: ["id", "url", "postId"],
  VideoCountOrderByAggregateInput: ["id", "thumbnailUrl", "url", "postId"],
  VideoMaxOrderByAggregateInput: ["id", "thumbnailUrl", "url", "postId"],
  VideoMinOrderByAggregateInput: ["id", "thumbnailUrl", "url", "postId"],
  ClipListRelationFilter: ["every", "some", "none"],
  ClipOrderByRelationAggregateInput: ["_count"],
  ClipAudioCountOrderByAggregateInput: ["id", "name", "audioUrl"],
  ClipAudioMaxOrderByAggregateInput: ["id", "name", "audioUrl"],
  ClipAudioMinOrderByAggregateInput: ["id", "name", "audioUrl"],
  ClipAudioRelationFilter: ["is", "isNot"],
  ClipCountOrderByAggregateInput: [
    "id",
    "url",
    "postId",
    "thumbnailUrl",
    "clipAudioId",
  ],
  ClipMaxOrderByAggregateInput: [
    "id",
    "url",
    "postId",
    "thumbnailUrl",
    "clipAudioId",
  ],
  ClipMinOrderByAggregateInput: [
    "id",
    "url",
    "postId",
    "thumbnailUrl",
    "clipAudioId",
  ],
  TextualCountOrderByAggregateInput: ["id", "text", "postId"],
  TextualMaxOrderByAggregateInput: ["id", "text", "postId"],
  TextualMinOrderByAggregateInput: ["id", "text", "postId"],
  AudioCountOrderByAggregateInput: ["id", "url", "postId"],
  AudioMaxOrderByAggregateInput: ["id", "url", "postId"],
  AudioMinOrderByAggregateInput: ["id", "url", "postId"],
  TagCountOrderByAggregateInput: ["id", "name"],
  TagMaxOrderByAggregateInput: ["id", "name"],
  TagMinOrderByAggregateInput: ["id", "name"],
  PlaceCountOrderByAggregateInput: ["id", "name", "address"],
  PlaceMaxOrderByAggregateInput: ["id", "name", "address"],
  PlaceMinOrderByAggregateInput: ["id", "name", "address"],
  LikeCountOrderByAggregateInput: ["id", "postId", "userId"],
  LikeMaxOrderByAggregateInput: ["id", "postId", "userId"],
  LikeMinOrderByAggregateInput: ["id", "postId", "userId"],
  CommentCountOrderByAggregateInput: ["id", "comment", "postId", "userId"],
  CommentMaxOrderByAggregateInput: ["id", "comment", "postId", "userId"],
  CommentMinOrderByAggregateInput: ["id", "comment", "postId", "userId"],
  CommentRelationFilter: ["is", "isNot"],
  CommentRepliesCountOrderByAggregateInput: [
    "id",
    "comment",
    "repliedToId",
    "userId",
  ],
  CommentRepliesMaxOrderByAggregateInput: [
    "id",
    "comment",
    "repliedToId",
    "userId",
  ],
  CommentRepliesMinOrderByAggregateInput: [
    "id",
    "comment",
    "repliedToId",
    "userId",
  ],
  FollowerCountOrderByAggregateInput: [
    "id",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  FollowerMaxOrderByAggregateInput: ["id", "userId", "createdAt", "updatedAt"],
  FollowerMinOrderByAggregateInput: ["id", "userId", "createdAt", "updatedAt"],
  FollowingCountOrderByAggregateInput: [
    "id",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  FollowingMaxOrderByAggregateInput: ["id", "userId", "createdAt", "updatedAt"],
  FollowingMinOrderByAggregateInput: ["id", "userId", "createdAt", "updatedAt"],
  FollowRequestCountOrderByAggregateInput: [
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  FollowRequestMaxOrderByAggregateInput: [
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  FollowRequestMinOrderByAggregateInput: [
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  StoryRelationFilter: ["is", "isNot"],
  MessageRelationFilter: ["is", "isNot"],
  EnumMessageMediaTypeFilter: ["equals", "in", "notIn", "not"],
  MessageCountOrderByAggregateInput: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  MessageMaxOrderByAggregateInput: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  MessageMinOrderByAggregateInput: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  EnumMessageMediaTypeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  StoryCountOrderByAggregateInput: [
    "id",
    "mediaUrl",
    "link",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  StoryMaxOrderByAggregateInput: [
    "id",
    "mediaUrl",
    "link",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  StoryMinOrderByAggregateInput: [
    "id",
    "mediaUrl",
    "link",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  EnumActivityTypeFilter: ["equals", "in", "notIn", "not"],
  ActivityCountOrderByAggregateInput: [
    "id",
    "type",
    "userId",
    "postId",
    "createdAt",
    "updatedAt",
  ],
  ActivityMaxOrderByAggregateInput: [
    "id",
    "type",
    "userId",
    "postId",
    "createdAt",
    "updatedAt",
  ],
  ActivityMinOrderByAggregateInput: [
    "id",
    "type",
    "userId",
    "postId",
    "createdAt",
    "updatedAt",
  ],
  EnumActivityTypeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  ProfileCreateNestedOneWithoutUserInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  TokenCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  PostCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  LikeCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  CommentCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  FollowerCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  FollowingCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  FollowRequestCreateNestedManyWithoutSourceUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  FollowRequestCreateNestedManyWithoutTargetUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  MessageCreateNestedManyWithoutSourceUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  MessageCreateNestedManyWithoutTargetUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  StoryCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ActivityCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  BlockedCreateNestedManyWithoutSourceUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  BlockedCreateNestedManyWithoutTargetUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  SettingsCreateNestedOneWithoutUserInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PollAnswerCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  CommentRepliesCreateNestedManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  StringFieldUpdateOperationsInput: ["set"],
  NullableStringFieldUpdateOperationsInput: ["set"],
  EnumRoleFieldUpdateOperationsInput: ["set"],
  EnumAccountTypeFieldUpdateOperationsInput: ["set"],
  BoolFieldUpdateOperationsInput: ["set"],
  DateTimeFieldUpdateOperationsInput: ["set"],
  IntFieldUpdateOperationsInput: [
    "set",
    "increment",
    "decrement",
    "multiply",
    "divide",
  ],
  ProfileUpdateOneWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  TokenUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  PostUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  LikeUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CommentUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  FollowerUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  FollowingUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  FollowRequestUpdateManyWithoutSourceUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  FollowRequestUpdateManyWithoutTargetUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  MessageUpdateManyWithoutSourceUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  MessageUpdateManyWithoutTargetUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  StoryUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ActivityUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  BlockedUpdateManyWithoutSourceUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  BlockedUpdateManyWithoutTargetUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  SettingsUpdateOneWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  PollAnswerUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CommentRepliesUpdateManyWithoutUserInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  UserCreateNestedOneWithoutProfileInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  NullableEnumGenderFieldUpdateOperationsInput: ["set"],
  NullableDateTimeFieldUpdateOperationsInput: ["set"],
  NullableEnumInterestedInTypesFieldUpdateOperationsInput: ["set"],
  NullableEnumRelationshipStatusFieldUpdateOperationsInput: ["set"],
  UserUpdateOneWithoutProfileInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutSettingsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserUpdateOneWithoutSettingsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutTokensInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  EnumTokenTypeFieldUpdateOperationsInput: ["set"],
  UserUpdateOneRequiredWithoutTokensInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutBlockedByInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserCreateNestedOneWithoutBlockedInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserUpdateOneRequiredWithoutBlockedByInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutBlockedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutPostsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  TagCreateNestedManyWithoutPostsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PlaceCreateNestedOneWithoutPostsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PollCreateNestedOneWithoutPostInput: ["create", "connectOrCreate", "connect"],
  PhotoCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  VideoCreateNestedOneWithoutPostInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  ClipCreateNestedOneWithoutPostInput: ["create", "connectOrCreate", "connect"],
  TextualCreateNestedOneWithoutPostInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  AudioCreateNestedOneWithoutPostInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  LikeCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  CommentCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ActivityCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  MessageCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  EnumPostTypeFieldUpdateOperationsInput: ["set"],
  UserUpdateOneRequiredWithoutPostsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  TagUpdateManyWithoutPostsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  PlaceUpdateOneWithoutPostsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  PollUpdateOneWithoutPostInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  PhotoUpdateManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  VideoUpdateOneWithoutPostInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  ClipUpdateOneWithoutPostInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  TextualUpdateOneWithoutPostInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  AudioUpdateOneWithoutPostInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  LikeUpdateManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CommentUpdateManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ActivityUpdateManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  MessageUpdateManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  PostCreateNestedOneWithoutPollInput: ["create", "connectOrCreate", "connect"],
  PollOptionCreateNestedManyWithoutPollInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  PollAnswerCreateNestedManyWithoutPollInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  PostUpdateOneRequiredWithoutPollInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PollOptionUpdateManyWithoutPollInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  PollAnswerUpdateManyWithoutPollInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  PollCreateNestedOneWithoutPollOptionsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PollAnswerCreateNestedManyWithoutPollOptionInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  PollUpdateOneRequiredWithoutPollOptionsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PollAnswerUpdateManyWithoutPollOptionInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  UserCreateNestedOneWithoutPollAnswersInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PollCreateNestedOneWithoutPollAnswersInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PollOptionCreateNestedOneWithoutPollAnswersInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserUpdateOneRequiredWithoutPollAnswersInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PollUpdateOneRequiredWithoutPollAnswersInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PollOptionUpdateOneRequiredWithoutPollAnswersInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutPhotosInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutPhotosInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutVideoInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutVideoInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ClipCreateNestedManyWithoutClipAudioInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ClipUpdateManyWithoutClipAudioInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  PostCreateNestedOneWithoutClipInput: ["create", "connectOrCreate", "connect"],
  ClipAudioCreateNestedOneWithoutClipsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutClipInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  ClipAudioUpdateOneRequiredWithoutClipsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutTextualInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutTextualInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutAudioInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutAudioInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedManyWithoutTagsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateManyWithoutTagsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  PostCreateNestedManyWithoutPlaceInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  PostUpdateManyWithoutPlaceInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  PostCreateNestedOneWithoutLikesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserCreateNestedOneWithoutLikesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutLikesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutLikesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutCommentsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserCreateNestedOneWithoutCommentsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  CommentRepliesCreateNestedManyWithoutRepliedToInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  PostUpdateOneRequiredWithoutCommentsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutCommentsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  CommentRepliesUpdateManyWithoutRepliedToInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CommentCreateNestedOneWithoutCommentRepliesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserCreateNestedOneWithoutCommentRepliesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  CommentUpdateOneRequiredWithoutCommentRepliesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutCommentRepliesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutFollowersInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserUpdateOneRequiredWithoutFollowersInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutFollowingsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserUpdateOneRequiredWithoutFollowingsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserCreateNestedOneWithoutSentFollowRequestsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserCreateNestedOneWithoutReceivedFollowRequestsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserUpdateOneRequiredWithoutSentFollowRequestsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutReceivedFollowRequestsInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutMessageInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  StoryCreateNestedOneWithoutMessageInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserCreateNestedOneWithoutSentMessagesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserCreateNestedOneWithoutReceivedMessagesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  MessageCreateNestedOneWithoutReplyToMessageInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  MessageCreateNestedManyWithoutReplyToInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  EnumMessageMediaTypeFieldUpdateOperationsInput: ["set"],
  PostUpdateOneWithoutMessageInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  StoryUpdateOneWithoutMessageInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutSentMessagesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutReceivedMessagesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  MessageUpdateOneWithoutReplyToMessageInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  MessageUpdateManyWithoutReplyToInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  UserCreateNestedOneWithoutStoriesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  MessageCreateNestedManyWithoutStoryInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  UserUpdateOneRequiredWithoutStoriesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  MessageUpdateManyWithoutStoryInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  UserCreateNestedOneWithoutActivitiesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostCreateNestedOneWithoutActivitiesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  EnumActivityTypeFieldUpdateOperationsInput: ["set"],
  UserUpdateOneRequiredWithoutActivitiesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostUpdateOneRequiredWithoutActivitiesInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  NestedStringFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
  ],
  NestedStringNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
  ],
  NestedEnumRoleFilter: ["equals", "in", "notIn", "not"],
  NestedEnumAccountTypeFilter: ["equals", "in", "notIn", "not"],
  NestedBoolFilter: ["equals", "not"],
  NestedDateTimeFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
  ],
  NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedStringNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedIntNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
  ],
  NestedEnumRoleWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedEnumAccountTypeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedDateTimeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedIntWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_avg",
    "_sum",
    "_min",
    "_max",
  ],
  NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedEnumGenderNullableFilter: ["equals", "in", "notIn", "not"],
  NestedDateTimeNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
  ],
  NestedEnumInterestedInTypesNullableFilter: ["equals", "in", "notIn", "not"],
  NestedEnumRelationshipStatusNullableFilter: ["equals", "in", "notIn", "not"],
  NestedEnumGenderNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedDateTimeNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedEnumInterestedInTypesNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedEnumRelationshipStatusNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedEnumTokenTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumTokenTypeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedEnumPostTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumPostTypeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedEnumMessageMediaTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumMessageMediaTypeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedEnumActivityTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumActivityTypeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  ProfileCreateWithoutUserInput: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
  ],
  ProfileCreateOrConnectWithoutUserInput: ["where", "create"],
  TokenCreateWithoutUserInput: [
    "id",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  TokenCreateOrConnectWithoutUserInput: ["where", "create"],
  TokenCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  PostCreateWithoutUserInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateOrConnectWithoutUserInput: ["where", "create"],
  PostCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  LikeCreateWithoutUserInput: ["id", "post"],
  LikeCreateOrConnectWithoutUserInput: ["where", "create"],
  LikeCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  CommentCreateWithoutUserInput: ["id", "comment", "post", "commentReplies"],
  CommentCreateOrConnectWithoutUserInput: ["where", "create"],
  CommentCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  FollowerCreateWithoutUserInput: ["id", "createdAt", "updatedAt"],
  FollowerCreateOrConnectWithoutUserInput: ["where", "create"],
  FollowerCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  FollowingCreateWithoutUserInput: ["id", "createdAt", "updatedAt"],
  FollowingCreateOrConnectWithoutUserInput: ["where", "create"],
  FollowingCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  FollowRequestCreateWithoutSourceUserInput: [
    "id",
    "message",
    "createdAt",
    "updatedAt",
    "targetUser",
  ],
  FollowRequestCreateOrConnectWithoutSourceUserInput: ["where", "create"],
  FollowRequestCreateManySourceUserInputEnvelope: ["data", "skipDuplicates"],
  FollowRequestCreateWithoutTargetUserInput: [
    "id",
    "message",
    "createdAt",
    "updatedAt",
    "sourceUser",
  ],
  FollowRequestCreateOrConnectWithoutTargetUserInput: ["where", "create"],
  FollowRequestCreateManyTargetUserInputEnvelope: ["data", "skipDuplicates"],
  MessageCreateWithoutSourceUserInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "story",
    "targetUser",
    "replyTo",
    "replyToMessage",
  ],
  MessageCreateOrConnectWithoutSourceUserInput: ["where", "create"],
  MessageCreateManySourceUserInputEnvelope: ["data", "skipDuplicates"],
  MessageCreateWithoutTargetUserInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "story",
    "sourceUser",
    "replyTo",
    "replyToMessage",
  ],
  MessageCreateOrConnectWithoutTargetUserInput: ["where", "create"],
  MessageCreateManyTargetUserInputEnvelope: ["data", "skipDuplicates"],
  StoryCreateWithoutUserInput: [
    "id",
    "mediaUrl",
    "link",
    "createdAt",
    "updatedAt",
    "message",
  ],
  StoryCreateOrConnectWithoutUserInput: ["where", "create"],
  StoryCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  ActivityCreateWithoutUserInput: [
    "id",
    "type",
    "createdAt",
    "updatedAt",
    "post",
  ],
  ActivityCreateOrConnectWithoutUserInput: ["where", "create"],
  ActivityCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  BlockedCreateWithoutSourceUserInput: [
    "id",
    "createdAt",
    "updatedAt",
    "targetUser",
  ],
  BlockedCreateOrConnectWithoutSourceUserInput: ["where", "create"],
  BlockedCreateManySourceUserInputEnvelope: ["data", "skipDuplicates"],
  BlockedCreateWithoutTargetUserInput: [
    "id",
    "createdAt",
    "updatedAt",
    "sourceUser",
  ],
  BlockedCreateOrConnectWithoutTargetUserInput: ["where", "create"],
  BlockedCreateManyTargetUserInputEnvelope: ["data", "skipDuplicates"],
  SettingsCreateWithoutUserInput: ["id"],
  SettingsCreateOrConnectWithoutUserInput: ["where", "create"],
  PollAnswerCreateWithoutUserInput: ["id", "poll", "pollOption"],
  PollAnswerCreateOrConnectWithoutUserInput: ["where", "create"],
  PollAnswerCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  CommentRepliesCreateWithoutUserInput: ["id", "comment", "repliedTo"],
  CommentRepliesCreateOrConnectWithoutUserInput: ["where", "create"],
  CommentRepliesCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  ProfileUpsertWithoutUserInput: ["update", "create"],
  ProfileUpdateWithoutUserInput: [
    "id",
    "nickname",
    "bio",
    "mobileNo",
    "country",
    "gender",
    "dob",
    "interestedIn",
    "relationshipStatus",
    "website",
    "dpUrl",
  ],
  TokenUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  TokenUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  TokenUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  TokenScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  PostUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  PostUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  PostUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  PostScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
  ],
  LikeUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  LikeUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  LikeUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  LikeScalarWhereInput: ["AND", "OR", "NOT", "id", "postId", "userId"],
  CommentUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  CommentUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  CommentUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  CommentScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "comment",
    "postId",
    "userId",
  ],
  FollowerUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  FollowerUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  FollowerUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  FollowerScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  FollowingUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  FollowingUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  FollowingUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  FollowingScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  FollowRequestUpsertWithWhereUniqueWithoutSourceUserInput: [
    "where",
    "update",
    "create",
  ],
  FollowRequestUpdateWithWhereUniqueWithoutSourceUserInput: ["where", "data"],
  FollowRequestUpdateManyWithWhereWithoutSourceUserInput: ["where", "data"],
  FollowRequestScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "message",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  FollowRequestUpsertWithWhereUniqueWithoutTargetUserInput: [
    "where",
    "update",
    "create",
  ],
  FollowRequestUpdateWithWhereUniqueWithoutTargetUserInput: ["where", "data"],
  FollowRequestUpdateManyWithWhereWithoutTargetUserInput: ["where", "data"],
  MessageUpsertWithWhereUniqueWithoutSourceUserInput: [
    "where",
    "update",
    "create",
  ],
  MessageUpdateWithWhereUniqueWithoutSourceUserInput: ["where", "data"],
  MessageUpdateManyWithWhereWithoutSourceUserInput: ["where", "data"],
  MessageScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  MessageUpsertWithWhereUniqueWithoutTargetUserInput: [
    "where",
    "update",
    "create",
  ],
  MessageUpdateWithWhereUniqueWithoutTargetUserInput: ["where", "data"],
  MessageUpdateManyWithWhereWithoutTargetUserInput: ["where", "data"],
  StoryUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  StoryUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  StoryUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  StoryScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "mediaUrl",
    "link",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  ActivityUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  ActivityUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  ActivityUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  ActivityScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "type",
    "userId",
    "postId",
    "createdAt",
    "updatedAt",
  ],
  BlockedUpsertWithWhereUniqueWithoutSourceUserInput: [
    "where",
    "update",
    "create",
  ],
  BlockedUpdateWithWhereUniqueWithoutSourceUserInput: ["where", "data"],
  BlockedUpdateManyWithWhereWithoutSourceUserInput: ["where", "data"],
  BlockedScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "sourceUserId",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  BlockedUpsertWithWhereUniqueWithoutTargetUserInput: [
    "where",
    "update",
    "create",
  ],
  BlockedUpdateWithWhereUniqueWithoutTargetUserInput: ["where", "data"],
  BlockedUpdateManyWithWhereWithoutTargetUserInput: ["where", "data"],
  SettingsUpsertWithoutUserInput: ["update", "create"],
  SettingsUpdateWithoutUserInput: ["id"],
  PollAnswerUpsertWithWhereUniqueWithoutUserInput: [
    "where",
    "update",
    "create",
  ],
  PollAnswerUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  PollAnswerUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  PollAnswerScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "userId",
    "pollId",
    "pollOptionId",
  ],
  CommentRepliesUpsertWithWhereUniqueWithoutUserInput: [
    "where",
    "update",
    "create",
  ],
  CommentRepliesUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  CommentRepliesUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  CommentRepliesScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "comment",
    "repliedToId",
    "userId",
  ],
  UserCreateWithoutProfileInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutProfileInput: ["where", "create"],
  UserUpsertWithoutProfileInput: ["update", "create"],
  UserUpdateWithoutProfileInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateWithoutSettingsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutSettingsInput: ["where", "create"],
  UserUpsertWithoutSettingsInput: ["update", "create"],
  UserUpdateWithoutSettingsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateWithoutTokensInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutTokensInput: ["where", "create"],
  UserUpsertWithoutTokensInput: ["update", "create"],
  UserUpdateWithoutTokensInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateWithoutBlockedByInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutBlockedByInput: ["where", "create"],
  UserCreateWithoutBlockedInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutBlockedInput: ["where", "create"],
  UserUpsertWithoutBlockedByInput: ["update", "create"],
  UserUpdateWithoutBlockedByInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserUpsertWithoutBlockedInput: ["update", "create"],
  UserUpdateWithoutBlockedInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateWithoutPostsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutPostsInput: ["where", "create"],
  TagCreateWithoutPostsInput: ["id", "name"],
  TagCreateOrConnectWithoutPostsInput: ["where", "create"],
  PlaceCreateWithoutPostsInput: ["id", "name", "address"],
  PlaceCreateOrConnectWithoutPostsInput: ["where", "create"],
  PollCreateWithoutPostInput: ["id", "question", "pollOptions", "pollAnswers"],
  PollCreateOrConnectWithoutPostInput: ["where", "create"],
  PhotoCreateWithoutPostInput: ["id", "url"],
  PhotoCreateOrConnectWithoutPostInput: ["where", "create"],
  PhotoCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  VideoCreateWithoutPostInput: ["id", "thumbnailUrl", "url"],
  VideoCreateOrConnectWithoutPostInput: ["where", "create"],
  ClipCreateWithoutPostInput: ["id", "url", "thumbnailUrl", "clipAudio"],
  ClipCreateOrConnectWithoutPostInput: ["where", "create"],
  TextualCreateWithoutPostInput: ["id", "text"],
  TextualCreateOrConnectWithoutPostInput: ["where", "create"],
  AudioCreateWithoutPostInput: ["id", "url"],
  AudioCreateOrConnectWithoutPostInput: ["where", "create"],
  LikeCreateWithoutPostInput: ["id", "user"],
  LikeCreateOrConnectWithoutPostInput: ["where", "create"],
  LikeCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  CommentCreateWithoutPostInput: ["id", "comment", "user", "commentReplies"],
  CommentCreateOrConnectWithoutPostInput: ["where", "create"],
  CommentCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  ActivityCreateWithoutPostInput: [
    "id",
    "type",
    "createdAt",
    "updatedAt",
    "user",
  ],
  ActivityCreateOrConnectWithoutPostInput: ["where", "create"],
  ActivityCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  MessageCreateWithoutPostInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "story",
    "sourceUser",
    "targetUser",
    "replyTo",
    "replyToMessage",
  ],
  MessageCreateOrConnectWithoutPostInput: ["where", "create"],
  MessageCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutPostsInput: ["update", "create"],
  UserUpdateWithoutPostsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  TagUpsertWithWhereUniqueWithoutPostsInput: ["where", "update", "create"],
  TagUpdateWithWhereUniqueWithoutPostsInput: ["where", "data"],
  TagUpdateManyWithWhereWithoutPostsInput: ["where", "data"],
  TagScalarWhereInput: ["AND", "OR", "NOT", "id", "name"],
  PlaceUpsertWithoutPostsInput: ["update", "create"],
  PlaceUpdateWithoutPostsInput: ["id", "name", "address"],
  PollUpsertWithoutPostInput: ["update", "create"],
  PollUpdateWithoutPostInput: ["id", "question", "pollOptions", "pollAnswers"],
  PhotoUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  PhotoUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  PhotoUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  PhotoScalarWhereInput: ["AND", "OR", "NOT", "id", "url", "postId"],
  VideoUpsertWithoutPostInput: ["update", "create"],
  VideoUpdateWithoutPostInput: ["id", "thumbnailUrl", "url"],
  ClipUpsertWithoutPostInput: ["update", "create"],
  ClipUpdateWithoutPostInput: ["id", "url", "thumbnailUrl", "clipAudio"],
  TextualUpsertWithoutPostInput: ["update", "create"],
  TextualUpdateWithoutPostInput: ["id", "text"],
  AudioUpsertWithoutPostInput: ["update", "create"],
  AudioUpdateWithoutPostInput: ["id", "url"],
  LikeUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  LikeUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  LikeUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  CommentUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  CommentUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  CommentUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  ActivityUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  ActivityUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  ActivityUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  MessageUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  MessageUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  MessageUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  PostCreateWithoutPollInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateOrConnectWithoutPollInput: ["where", "create"],
  PollOptionCreateWithoutPollInput: ["id", "option", "pollAnswers"],
  PollOptionCreateOrConnectWithoutPollInput: ["where", "create"],
  PollOptionCreateManyPollInputEnvelope: ["data", "skipDuplicates"],
  PollAnswerCreateWithoutPollInput: ["id", "user", "pollOption"],
  PollAnswerCreateOrConnectWithoutPollInput: ["where", "create"],
  PollAnswerCreateManyPollInputEnvelope: ["data", "skipDuplicates"],
  PostUpsertWithoutPollInput: ["update", "create"],
  PostUpdateWithoutPollInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PollOptionUpsertWithWhereUniqueWithoutPollInput: [
    "where",
    "update",
    "create",
  ],
  PollOptionUpdateWithWhereUniqueWithoutPollInput: ["where", "data"],
  PollOptionUpdateManyWithWhereWithoutPollInput: ["where", "data"],
  PollOptionScalarWhereInput: ["AND", "OR", "NOT", "id", "option", "pollId"],
  PollAnswerUpsertWithWhereUniqueWithoutPollInput: [
    "where",
    "update",
    "create",
  ],
  PollAnswerUpdateWithWhereUniqueWithoutPollInput: ["where", "data"],
  PollAnswerUpdateManyWithWhereWithoutPollInput: ["where", "data"],
  PollCreateWithoutPollOptionsInput: ["id", "question", "post", "pollAnswers"],
  PollCreateOrConnectWithoutPollOptionsInput: ["where", "create"],
  PollAnswerCreateWithoutPollOptionInput: ["id", "user", "poll"],
  PollAnswerCreateOrConnectWithoutPollOptionInput: ["where", "create"],
  PollAnswerCreateManyPollOptionInputEnvelope: ["data", "skipDuplicates"],
  PollUpsertWithoutPollOptionsInput: ["update", "create"],
  PollUpdateWithoutPollOptionsInput: ["id", "question", "post", "pollAnswers"],
  PollAnswerUpsertWithWhereUniqueWithoutPollOptionInput: [
    "where",
    "update",
    "create",
  ],
  PollAnswerUpdateWithWhereUniqueWithoutPollOptionInput: ["where", "data"],
  PollAnswerUpdateManyWithWhereWithoutPollOptionInput: ["where", "data"],
  UserCreateWithoutPollAnswersInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutPollAnswersInput: ["where", "create"],
  PollCreateWithoutPollAnswersInput: ["id", "question", "post", "pollOptions"],
  PollCreateOrConnectWithoutPollAnswersInput: ["where", "create"],
  PollOptionCreateWithoutPollAnswersInput: ["id", "option", "poll"],
  PollOptionCreateOrConnectWithoutPollAnswersInput: ["where", "create"],
  UserUpsertWithoutPollAnswersInput: ["update", "create"],
  UserUpdateWithoutPollAnswersInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "commentReplies",
  ],
  PollUpsertWithoutPollAnswersInput: ["update", "create"],
  PollUpdateWithoutPollAnswersInput: ["id", "question", "post", "pollOptions"],
  PollOptionUpsertWithoutPollAnswersInput: ["update", "create"],
  PollOptionUpdateWithoutPollAnswersInput: ["id", "option", "poll"],
  PostCreateWithoutPhotosInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateOrConnectWithoutPhotosInput: ["where", "create"],
  PostUpsertWithoutPhotosInput: ["update", "create"],
  PostUpdateWithoutPhotosInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateWithoutVideoInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateOrConnectWithoutVideoInput: ["where", "create"],
  PostUpsertWithoutVideoInput: ["update", "create"],
  PostUpdateWithoutVideoInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  ClipCreateWithoutClipAudioInput: ["id", "url", "thumbnailUrl", "post"],
  ClipCreateOrConnectWithoutClipAudioInput: ["where", "create"],
  ClipCreateManyClipAudioInputEnvelope: ["data", "skipDuplicates"],
  ClipUpsertWithWhereUniqueWithoutClipAudioInput: ["where", "update", "create"],
  ClipUpdateWithWhereUniqueWithoutClipAudioInput: ["where", "data"],
  ClipUpdateManyWithWhereWithoutClipAudioInput: ["where", "data"],
  ClipScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "url",
    "postId",
    "thumbnailUrl",
    "clipAudioId",
  ],
  PostCreateWithoutClipInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateOrConnectWithoutClipInput: ["where", "create"],
  ClipAudioCreateWithoutClipsInput: ["id", "name", "audioUrl"],
  ClipAudioCreateOrConnectWithoutClipsInput: ["where", "create"],
  PostUpsertWithoutClipInput: ["update", "create"],
  PostUpdateWithoutClipInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  ClipAudioUpsertWithoutClipsInput: ["update", "create"],
  ClipAudioUpdateWithoutClipsInput: ["id", "name", "audioUrl"],
  PostCreateWithoutTextualInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateOrConnectWithoutTextualInput: ["where", "create"],
  PostUpsertWithoutTextualInput: ["update", "create"],
  PostUpdateWithoutTextualInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateWithoutAudioInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateOrConnectWithoutAudioInput: ["where", "create"],
  PostUpsertWithoutAudioInput: ["update", "create"],
  PostUpdateWithoutAudioInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateWithoutTagsInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateOrConnectWithoutTagsInput: ["where", "create"],
  PostUpsertWithWhereUniqueWithoutTagsInput: ["where", "update", "create"],
  PostUpdateWithWhereUniqueWithoutTagsInput: ["where", "data"],
  PostUpdateManyWithWhereWithoutTagsInput: ["where", "data"],
  PostCreateWithoutPlaceInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateOrConnectWithoutPlaceInput: ["where", "create"],
  PostCreateManyPlaceInputEnvelope: ["data", "skipDuplicates"],
  PostUpsertWithWhereUniqueWithoutPlaceInput: ["where", "update", "create"],
  PostUpdateWithWhereUniqueWithoutPlaceInput: ["where", "data"],
  PostUpdateManyWithWhereWithoutPlaceInput: ["where", "data"],
  PostCreateWithoutLikesInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "comments",
    "activities",
    "message",
  ],
  PostCreateOrConnectWithoutLikesInput: ["where", "create"],
  UserCreateWithoutLikesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutLikesInput: ["where", "create"],
  PostUpsertWithoutLikesInput: ["update", "create"],
  PostUpdateWithoutLikesInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "comments",
    "activities",
    "message",
  ],
  UserUpsertWithoutLikesInput: ["update", "create"],
  UserUpdateWithoutLikesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  PostCreateWithoutCommentsInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "activities",
    "message",
  ],
  PostCreateOrConnectWithoutCommentsInput: ["where", "create"],
  UserCreateWithoutCommentsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutCommentsInput: ["where", "create"],
  CommentRepliesCreateWithoutRepliedToInput: ["id", "comment", "user"],
  CommentRepliesCreateOrConnectWithoutRepliedToInput: ["where", "create"],
  CommentRepliesCreateManyRepliedToInputEnvelope: ["data", "skipDuplicates"],
  PostUpsertWithoutCommentsInput: ["update", "create"],
  PostUpdateWithoutCommentsInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "activities",
    "message",
  ],
  UserUpsertWithoutCommentsInput: ["update", "create"],
  UserUpdateWithoutCommentsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  CommentRepliesUpsertWithWhereUniqueWithoutRepliedToInput: [
    "where",
    "update",
    "create",
  ],
  CommentRepliesUpdateWithWhereUniqueWithoutRepliedToInput: ["where", "data"],
  CommentRepliesUpdateManyWithWhereWithoutRepliedToInput: ["where", "data"],
  CommentCreateWithoutCommentRepliesInput: ["id", "comment", "post", "user"],
  CommentCreateOrConnectWithoutCommentRepliesInput: ["where", "create"],
  UserCreateWithoutCommentRepliesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
  ],
  UserCreateOrConnectWithoutCommentRepliesInput: ["where", "create"],
  CommentUpsertWithoutCommentRepliesInput: ["update", "create"],
  CommentUpdateWithoutCommentRepliesInput: ["id", "comment", "post", "user"],
  UserUpsertWithoutCommentRepliesInput: ["update", "create"],
  UserUpdateWithoutCommentRepliesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
  ],
  UserCreateWithoutFollowersInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutFollowersInput: ["where", "create"],
  UserUpsertWithoutFollowersInput: ["update", "create"],
  UserUpdateWithoutFollowersInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateWithoutFollowingsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutFollowingsInput: ["where", "create"],
  UserUpsertWithoutFollowingsInput: ["update", "create"],
  UserUpdateWithoutFollowingsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateWithoutSentFollowRequestsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutSentFollowRequestsInput: ["where", "create"],
  UserCreateWithoutReceivedFollowRequestsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutReceivedFollowRequestsInput: ["where", "create"],
  UserUpsertWithoutSentFollowRequestsInput: ["update", "create"],
  UserUpdateWithoutSentFollowRequestsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserUpsertWithoutReceivedFollowRequestsInput: ["update", "create"],
  UserUpdateWithoutReceivedFollowRequestsInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  PostCreateWithoutMessageInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
  ],
  PostCreateOrConnectWithoutMessageInput: ["where", "create"],
  StoryCreateWithoutMessageInput: [
    "id",
    "mediaUrl",
    "link",
    "createdAt",
    "updatedAt",
    "user",
  ],
  StoryCreateOrConnectWithoutMessageInput: ["where", "create"],
  UserCreateWithoutSentMessagesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutSentMessagesInput: ["where", "create"],
  UserCreateWithoutReceivedMessagesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutReceivedMessagesInput: ["where", "create"],
  MessageCreateWithoutReplyToMessageInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "story",
    "sourceUser",
    "targetUser",
    "replyTo",
  ],
  MessageCreateOrConnectWithoutReplyToMessageInput: ["where", "create"],
  MessageCreateWithoutReplyToInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "story",
    "sourceUser",
    "targetUser",
    "replyToMessage",
  ],
  MessageCreateOrConnectWithoutReplyToInput: ["where", "create"],
  MessageCreateManyReplyToInputEnvelope: ["data", "skipDuplicates"],
  PostUpsertWithoutMessageInput: ["update", "create"],
  PostUpdateWithoutMessageInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
  ],
  StoryUpsertWithoutMessageInput: ["update", "create"],
  StoryUpdateWithoutMessageInput: [
    "id",
    "mediaUrl",
    "link",
    "createdAt",
    "updatedAt",
    "user",
  ],
  UserUpsertWithoutSentMessagesInput: ["update", "create"],
  UserUpdateWithoutSentMessagesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "receivedMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserUpsertWithoutReceivedMessagesInput: ["update", "create"],
  UserUpdateWithoutReceivedMessagesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "stories",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  MessageUpsertWithoutReplyToMessageInput: ["update", "create"],
  MessageUpdateWithoutReplyToMessageInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "story",
    "sourceUser",
    "targetUser",
    "replyTo",
  ],
  MessageUpsertWithWhereUniqueWithoutReplyToInput: [
    "where",
    "update",
    "create",
  ],
  MessageUpdateWithWhereUniqueWithoutReplyToInput: ["where", "data"],
  MessageUpdateManyWithWhereWithoutReplyToInput: ["where", "data"],
  UserCreateWithoutStoriesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutStoriesInput: ["where", "create"],
  MessageCreateWithoutStoryInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "sourceUser",
    "targetUser",
    "replyTo",
    "replyToMessage",
  ],
  MessageCreateOrConnectWithoutStoryInput: ["where", "create"],
  MessageCreateManyStoryInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutStoriesInput: ["update", "create"],
  UserUpdateWithoutStoriesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "activities",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  MessageUpsertWithWhereUniqueWithoutStoryInput: ["where", "update", "create"],
  MessageUpdateWithWhereUniqueWithoutStoryInput: ["where", "data"],
  MessageUpdateManyWithWhereWithoutStoryInput: ["where", "data"],
  UserCreateWithoutActivitiesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  UserCreateOrConnectWithoutActivitiesInput: ["where", "create"],
  PostCreateWithoutActivitiesInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "message",
  ],
  PostCreateOrConnectWithoutActivitiesInput: ["where", "create"],
  UserUpsertWithoutActivitiesInput: ["update", "create"],
  UserUpdateWithoutActivitiesInput: [
    "id",
    "email",
    "username",
    "password",
    "googleUserId",
    "role",
    "accountType",
    "isVerified",
    "verificationExpires",
    "loginAttempts",
    "blockExpires",
    "active",
    "lastLogin",
    "createdAt",
    "updatedAt",
    "profile",
    "tokens",
    "posts",
    "likes",
    "comments",
    "followers",
    "followings",
    "sentFollowRequests",
    "receivedFollowRequests",
    "sentMessages",
    "receivedMessages",
    "stories",
    "blockedBy",
    "blocked",
    "settings",
    "pollAnswers",
    "commentReplies",
  ],
  PostUpsertWithoutActivitiesInput: ["update", "create"],
  PostUpdateWithoutActivitiesInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "message",
  ],
  TokenCreateManyUserInput: [
    "id",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  PostCreateManyUserInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "placeId",
    "archive",
    "published",
    "slug",
  ],
  LikeCreateManyUserInput: ["id", "postId"],
  CommentCreateManyUserInput: ["id", "comment", "postId"],
  FollowerCreateManyUserInput: ["id", "createdAt", "updatedAt"],
  FollowingCreateManyUserInput: ["id", "createdAt", "updatedAt"],
  FollowRequestCreateManySourceUserInput: [
    "id",
    "message",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  FollowRequestCreateManyTargetUserInput: [
    "id",
    "message",
    "sourceUserId",
    "createdAt",
    "updatedAt",
  ],
  MessageCreateManySourceUserInput: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  MessageCreateManyTargetUserInput: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  StoryCreateManyUserInput: [
    "id",
    "mediaUrl",
    "link",
    "createdAt",
    "updatedAt",
  ],
  ActivityCreateManyUserInput: [
    "id",
    "type",
    "postId",
    "createdAt",
    "updatedAt",
  ],
  BlockedCreateManySourceUserInput: [
    "id",
    "targetUserId",
    "createdAt",
    "updatedAt",
  ],
  BlockedCreateManyTargetUserInput: [
    "id",
    "sourceUserId",
    "createdAt",
    "updatedAt",
  ],
  PollAnswerCreateManyUserInput: ["id", "pollId", "pollOptionId"],
  CommentRepliesCreateManyUserInput: ["id", "comment", "repliedToId"],
  TokenUpdateWithoutUserInput: [
    "id",
    "token",
    "firstUsed",
    "finalUsed",
    "expires",
    "type",
    "ip",
    "browser",
    "country",
    "createdAt",
    "updatedAt",
  ],
  PostUpdateWithoutUserInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "tags",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  LikeUpdateWithoutUserInput: ["id", "post"],
  CommentUpdateWithoutUserInput: ["id", "comment", "post", "commentReplies"],
  FollowerUpdateWithoutUserInput: ["id", "createdAt", "updatedAt"],
  FollowingUpdateWithoutUserInput: ["id", "createdAt", "updatedAt"],
  FollowRequestUpdateWithoutSourceUserInput: [
    "id",
    "message",
    "createdAt",
    "updatedAt",
    "targetUser",
  ],
  FollowRequestUpdateWithoutTargetUserInput: [
    "id",
    "message",
    "createdAt",
    "updatedAt",
    "sourceUser",
  ],
  MessageUpdateWithoutSourceUserInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "story",
    "targetUser",
    "replyTo",
    "replyToMessage",
  ],
  MessageUpdateWithoutTargetUserInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "story",
    "sourceUser",
    "replyTo",
    "replyToMessage",
  ],
  StoryUpdateWithoutUserInput: [
    "id",
    "mediaUrl",
    "link",
    "createdAt",
    "updatedAt",
    "message",
  ],
  ActivityUpdateWithoutUserInput: [
    "id",
    "type",
    "createdAt",
    "updatedAt",
    "post",
  ],
  BlockedUpdateWithoutSourceUserInput: [
    "id",
    "createdAt",
    "updatedAt",
    "targetUser",
  ],
  BlockedUpdateWithoutTargetUserInput: [
    "id",
    "createdAt",
    "updatedAt",
    "sourceUser",
  ],
  PollAnswerUpdateWithoutUserInput: ["id", "poll", "pollOption"],
  CommentRepliesUpdateWithoutUserInput: ["id", "comment", "repliedTo"],
  PhotoCreateManyPostInput: ["id", "url"],
  LikeCreateManyPostInput: ["id", "userId"],
  CommentCreateManyPostInput: ["id", "comment", "userId"],
  ActivityCreateManyPostInput: [
    "id",
    "type",
    "userId",
    "createdAt",
    "updatedAt",
  ],
  MessageCreateManyPostInput: [
    "id",
    "message",
    "mediaUrl",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  TagUpdateWithoutPostsInput: ["id", "name"],
  PhotoUpdateWithoutPostInput: ["id", "url"],
  LikeUpdateWithoutPostInput: ["id", "user"],
  CommentUpdateWithoutPostInput: ["id", "comment", "user", "commentReplies"],
  ActivityUpdateWithoutPostInput: [
    "id",
    "type",
    "createdAt",
    "updatedAt",
    "user",
  ],
  MessageUpdateWithoutPostInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "story",
    "sourceUser",
    "targetUser",
    "replyTo",
    "replyToMessage",
  ],
  PollOptionCreateManyPollInput: ["id", "option"],
  PollAnswerCreateManyPollInput: ["id", "userId", "pollOptionId"],
  PollOptionUpdateWithoutPollInput: ["id", "option", "pollAnswers"],
  PollAnswerUpdateWithoutPollInput: ["id", "user", "pollOption"],
  PollAnswerCreateManyPollOptionInput: ["id", "userId", "pollId"],
  PollAnswerUpdateWithoutPollOptionInput: ["id", "user", "poll"],
  ClipCreateManyClipAudioInput: ["id", "url", "postId", "thumbnailUrl"],
  ClipUpdateWithoutClipAudioInput: ["id", "url", "thumbnailUrl", "post"],
  PostUpdateWithoutTagsInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "place",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  PostCreateManyPlaceInput: [
    "id",
    "userId",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
  ],
  PostUpdateWithoutPlaceInput: [
    "id",
    "caption",
    "type",
    "createdAt",
    "updatedAt",
    "archive",
    "published",
    "slug",
    "user",
    "tags",
    "poll",
    "photos",
    "video",
    "clip",
    "textual",
    "audio",
    "likes",
    "comments",
    "activities",
    "message",
  ],
  CommentRepliesCreateManyRepliedToInput: ["id", "comment", "userId"],
  CommentRepliesUpdateWithoutRepliedToInput: ["id", "comment", "user"],
  MessageCreateManyReplyToInput: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "storyId",
    "sourceUserId",
    "targetUserId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  MessageUpdateWithoutReplyToInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "story",
    "sourceUser",
    "targetUser",
    "replyToMessage",
  ],
  MessageCreateManyStoryInput: [
    "id",
    "message",
    "mediaUrl",
    "postId",
    "sourceUserId",
    "targetUserId",
    "replyToId",
    "mediaType",
    "createdAt",
    "updatedAt",
  ],
  MessageUpdateWithoutStoryInput: [
    "id",
    "message",
    "mediaUrl",
    "mediaType",
    "createdAt",
    "updatedAt",
    "post",
    "sourceUser",
    "targetUser",
    "replyTo",
    "replyToMessage",
  ],
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof typeof inputTypes[TInput]["prototype"],
  number | symbol
>;

type InputTypeFieldsConfig<TInput extends InputTypesNames> = FieldsConfig<
  InputTypeFieldNames<TInput>
>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap,
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName =
      inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo],
    );
  }
}
